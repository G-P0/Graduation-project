
workbeanch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000003fc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fdf  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000877  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000075d  00000000  00000000  00001e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046a  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000897  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000033a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	ae 00       	.word	0x00ae	; ????
  56:	90 00       	.word	0x0090	; ????
  58:	92 00       	.word	0x0092	; ????
  5a:	94 00       	.word	0x0094	; ????
  5c:	96 00       	.word	0x0096	; ????
  5e:	98 00       	.word	0x0098	; ????
  60:	9a 00       	.word	0x009a	; ????
  62:	9c 00       	.word	0x009c	; ????
  64:	9e 00       	.word	0x009e	; ????
  66:	a0 00       	.word	0x00a0	; ????
  68:	a2 00       	.word	0x00a2	; ????
  6a:	a4 00       	.word	0x00a4	; ????
  6c:	a6 00       	.word	0x00a6	; ????
  6e:	a8 00       	.word	0x00a8	; ????
  70:	aa 00       	.word	0x00aa	; ????
  72:	ac 00       	.word	0x00ac	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ec ef       	ldi	r30, 0xFC	; 252
  88:	f3 e0       	ldi	r31, 0x03	; 3
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a8 3a       	cpi	r26, 0xA8	; 168
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  9a:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <KeyPad_getPressedKey>:

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
  a2:	a0 e1       	ldi	r26, 0x10	; 16
  a4:	b0 e0       	ldi	r27, 0x00	; 0
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b11110000);
  a6:	f0 ef       	ldi	r31, 0xF0	; 240
 */
static uint8_t KeyPad_4x4_adjustKeyNumber(uint8_t button_number);
#endif

/************************** Functions Definitions **********************/
uint8_t KeyPad_getPressedKey(void){
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	86 2f       	mov	r24, r22
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b11110000);
  ae:	fa bb       	out	0x1a, r31	; 26

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
  b0:	9d 01       	movw	r18, r26
  b2:	06 2e       	mov	r0, r22
  b4:	02 c0       	rjmp	.+4      	; 0xba <KeyPad_getPressedKey+0x18>
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <KeyPad_getPressedKey+0x14>
  be:	20 95       	com	r18
  c0:	2b bb       	out	0x1b, r18	; 27
			for(row=0;row<N_row;row++) /* loop for rows */
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
  c2:	c8 9b       	sbis	0x19, 0	; 25
  c4:	0f c0       	rjmp	.+30     	; 0xe4 <KeyPad_getPressedKey+0x42>
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	92 2f       	mov	r25, r18
  cc:	49 b3       	in	r20, 0x19	; 25
  ce:	e2 2f       	mov	r30, r18
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	02 2e       	mov	r0, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <KeyPad_getPressedKey+0x38>
  d6:	55 95       	asr	r21
  d8:	47 95       	ror	r20
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <KeyPad_getPressedKey+0x34>
  de:	40 fd       	sbrc	r20, 0
  e0:	3f c0       	rjmp	.+126    	; 0x160 <KeyPad_getPressedKey+0xbe>
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <KeyPad_getPressedKey+0x46>
  e4:	e0 e0       	ldi	r30, 0x00	; 0
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for(row=0;row<N_row;row++) /* loop for rows */
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <KeyPad_getPressedKey+0x50>
  ee:	44 0f       	add	r20, r20
  f0:	55 1f       	adc	r21, r21
  f2:	ea 95       	dec	r30
  f4:	e2 f7       	brpl	.-8      	; 0xee <KeyPad_getPressedKey+0x4c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
				{	while(BIT_IS_CLEAR(KEYPAD_PORT_IN,row));/* will active when you release the button*/
  f6:	29 b3       	in	r18, 0x19	; 25
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	24 23       	and	r18, r20
  fc:	35 23       	and	r19, r21
  fe:	23 2b       	or	r18, r19
 100:	d1 f3       	breq	.-12     	; 0xf6 <KeyPad_getPressedKey+0x54>
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	99 0f       	add	r25, r25
 106:	99 0f       	add	r25, r25
 108:	89 0f       	add	r24, r25

#elif (N_col == 4)

static uint8_t KeyPad_4x4_adjustKeyNumber(uint8_t button_number)
{
	switch(button_number)
 10a:	48 2f       	mov	r20, r24
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	fa 01       	movw	r30, r20
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	e0 31       	cpi	r30, 0x10	; 16
 114:	f1 05       	cpc	r31, r1
 116:	88 f5       	brcc	.+98     	; 0x17a <KeyPad_getPressedKey+0xd8>
 118:	e6 5d       	subi	r30, 0xD6	; 214
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__tablejump2__>
	{
		case 1: return '1';
				break;
		case 2: return '2';
 120:	82 e3       	ldi	r24, 0x32	; 50
 122:	08 95       	ret
				break;
		case 3: return '3';
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	08 95       	ret
				break;
		case 4: return 'a'; /* ASCII Code of 'a' */
 128:	81 e6       	ldi	r24, 0x61	; 97
 12a:	08 95       	ret
				break;
		case 5: return '4';
 12c:	84 e3       	ldi	r24, 0x34	; 52
 12e:	08 95       	ret
				break;
		case 6: return '5';
 130:	85 e3       	ldi	r24, 0x35	; 53
 132:	08 95       	ret
				break;
		case 7: return '6';
 134:	86 e3       	ldi	r24, 0x36	; 54
 136:	08 95       	ret
				break;
		case 8: return 'b'; /* ASCII Code of 'b' */
 138:	82 e6       	ldi	r24, 0x62	; 98
 13a:	08 95       	ret
				break;
		case 9: return '7';
 13c:	87 e3       	ldi	r24, 0x37	; 55
 13e:	08 95       	ret
				break;
		case 10: return '8';
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	08 95       	ret
				break;
		case 11: return '9';
 144:	89 e3       	ldi	r24, 0x39	; 57
 146:	08 95       	ret
				break;
		case 12: return 'c'; /* ASCII Code of 'c' */
 148:	83 e6       	ldi	r24, 0x63	; 99
 14a:	08 95       	ret
				break;
		case 13: return '*';  /* ASCII of '*' */
 14c:	8a e2       	ldi	r24, 0x2A	; 42
 14e:	08 95       	ret
				break;
		case 14: return '0';
 150:	80 e3       	ldi	r24, 0x30	; 48
 152:	08 95       	ret
				break;
		case 15: return '#'; /* ASCII Code of '#' */
 154:	83 e2       	ldi	r24, 0x23	; 35
 156:	08 95       	ret
				break;
		case 16: return 'd'; /* ASCII Code of 'd' */
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	08 95       	ret

static uint8_t KeyPad_4x4_adjustKeyNumber(uint8_t button_number)
{
	switch(button_number)
	{
		case 1: return '1';
 15c:	81 e3       	ldi	r24, 0x31	; 49
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
				{	while(BIT_IS_CLEAR(KEYPAD_PORT_IN,row));/* will active when you release the button*/
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
 15e:	08 95       	ret
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for(row=0;row<N_row;row++) /* loop for rows */
 164:	24 30       	cpi	r18, 0x04	; 4
 166:	31 05       	cpc	r19, r1
 168:	09 f0       	breq	.+2      	; 0x16c <KeyPad_getPressedKey+0xca>
 16a:	af cf       	rjmp	.-162    	; 0xca <KeyPad_getPressedKey+0x28>
 16c:	6f 5f       	subi	r22, 0xFF	; 255
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
/************************** Functions Definitions **********************/
uint8_t KeyPad_getPressedKey(void){
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 170:	64 30       	cpi	r22, 0x04	; 4
 172:	71 05       	cpc	r23, r1
 174:	09 f0       	breq	.+2      	; 0x178 <KeyPad_getPressedKey+0xd6>
 176:	9a cf       	rjmp	.-204    	; 0xac <KeyPad_getPressedKey+0xa>
 178:	97 cf       	rjmp	.-210    	; 0xa8 <KeyPad_getPressedKey+0x6>
					#endif
				}
			}
		}
	}
}
 17a:	08 95       	ret

0000017c <LCD_sendCommand>:
void LCD_intgerToString(int data)
{
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* itoa convert int to char, 10 for decimal */
	LCD_displayString(buff);
}
 17c:	94 98       	cbi	0x12, 4	; 18
 17e:	95 98       	cbi	0x12, 5	; 18
 180:	e9 ef       	ldi	r30, 0xF9	; 249
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_sendCommand+0x8>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_sendCommand+0xe>
 18a:	00 00       	nop
 18c:	96 9a       	sbi	0x12, 6	; 18
 18e:	e9 ef       	ldi	r30, 0xF9	; 249
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_sendCommand+0x16>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_sendCommand+0x1c>
 198:	00 00       	nop
 19a:	98 2f       	mov	r25, r24
 19c:	90 7f       	andi	r25, 0xF0	; 240
 19e:	95 bb       	out	0x15, r25	; 21
 1a0:	e9 ef       	ldi	r30, 0xF9	; 249
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_sendCommand+0x28>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_sendCommand+0x2e>
 1aa:	00 00       	nop
 1ac:	96 98       	cbi	0x12, 6	; 18
 1ae:	e9 ef       	ldi	r30, 0xF9	; 249
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCD_sendCommand+0x36>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <LCD_sendCommand+0x3c>
 1b8:	00 00       	nop
 1ba:	96 9a       	sbi	0x12, 6	; 18
 1bc:	e9 ef       	ldi	r30, 0xF9	; 249
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_sendCommand+0x44>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_sendCommand+0x4a>
 1c6:	00 00       	nop
 1c8:	f0 e1       	ldi	r31, 0x10	; 16
 1ca:	8f 9f       	mul	r24, r31
 1cc:	c0 01       	movw	r24, r0
 1ce:	11 24       	eor	r1, r1
 1d0:	85 bb       	out	0x15, r24	; 21
 1d2:	89 ef       	ldi	r24, 0xF9	; 249
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_sendCommand+0x5a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_sendCommand+0x60>
 1dc:	00 00       	nop
 1de:	96 98       	cbi	0x12, 6	; 18
 1e0:	e9 ef       	ldi	r30, 0xF9	; 249
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_sendCommand+0x68>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_sendCommand+0x6e>
 1ea:	00 00       	nop
 1ec:	08 95       	ret

000001ee <LCD_init>:
 1ee:	81 b3       	in	r24, 0x11	; 17
 1f0:	80 67       	ori	r24, 0x70	; 112
 1f2:	81 bb       	out	0x11, r24	; 17
 1f4:	84 b3       	in	r24, 0x14	; 20
 1f6:	80 6f       	ori	r24, 0xF0	; 240
 1f8:	84 bb       	out	0x14, r24	; 20
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_sendCommand>
 200:	88 e2       	ldi	r24, 0x28	; 40
 202:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_sendCommand>
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_sendCommand>
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_sendCommand>
 212:	8c e0       	ldi	r24, 0x0C	; 12
 214:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_sendCommand>
 218:	08 95       	ret

0000021a <LCD_displayCharacter>:
 21a:	94 9a       	sbi	0x12, 4	; 18
 21c:	95 98       	cbi	0x12, 5	; 18
 21e:	e9 ef       	ldi	r30, 0xF9	; 249
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_displayCharacter+0x8>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_displayCharacter+0xe>
 228:	00 00       	nop
 22a:	96 9a       	sbi	0x12, 6	; 18
 22c:	e9 ef       	ldi	r30, 0xF9	; 249
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_displayCharacter+0x16>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_displayCharacter+0x1c>
 236:	00 00       	nop
 238:	98 2f       	mov	r25, r24
 23a:	90 7f       	andi	r25, 0xF0	; 240
 23c:	95 bb       	out	0x15, r25	; 21
 23e:	e9 ef       	ldi	r30, 0xF9	; 249
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCD_displayCharacter+0x28>
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_displayCharacter+0x2e>
 248:	00 00       	nop
 24a:	96 98       	cbi	0x12, 6	; 18
 24c:	e9 ef       	ldi	r30, 0xF9	; 249
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_displayCharacter+0x36>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_displayCharacter+0x3c>
 256:	00 00       	nop
 258:	96 9a       	sbi	0x12, 6	; 18
 25a:	e9 ef       	ldi	r30, 0xF9	; 249
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_displayCharacter+0x44>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_displayCharacter+0x4a>
 264:	00 00       	nop
 266:	f0 e1       	ldi	r31, 0x10	; 16
 268:	8f 9f       	mul	r24, r31
 26a:	c0 01       	movw	r24, r0
 26c:	11 24       	eor	r1, r1
 26e:	85 bb       	out	0x15, r24	; 21
 270:	89 ef       	ldi	r24, 0xF9	; 249
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCD_displayCharacter+0x5a>
 278:	00 c0       	rjmp	.+0      	; 0x27a <LCD_displayCharacter+0x60>
 27a:	00 00       	nop
 27c:	96 98       	cbi	0x12, 6	; 18
 27e:	e9 ef       	ldi	r30, 0xF9	; 249
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	31 97       	sbiw	r30, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_displayCharacter+0x68>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_displayCharacter+0x6e>
 288:	00 00       	nop
 28a:	08 95       	ret

0000028c <LCD_displayString>:
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
 292:	88 81       	ld	r24, Y
 294:	88 23       	and	r24, r24
 296:	31 f0       	breq	.+12     	; 0x2a4 <LCD_displayString+0x18>
 298:	21 96       	adiw	r28, 0x01	; 1
 29a:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_displayCharacter>
 29e:	89 91       	ld	r24, Y+
 2a0:	81 11       	cpse	r24, r1
 2a2:	fb cf       	rjmp	.-10     	; 0x29a <LCD_displayString+0xe>
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <LCD_goToRowColumn>:
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	31 f0       	breq	.+12     	; 0x2ba <LCD_goToRowColumn+0x10>
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	31 f0       	breq	.+12     	; 0x2be <LCD_goToRowColumn+0x14>
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	29 f4       	brne	.+10     	; 0x2c0 <LCD_goToRowColumn+0x16>
 2b6:	60 5c       	subi	r22, 0xC0	; 192
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <LCD_goToRowColumn+0x16>
 2ba:	60 5f       	subi	r22, 0xF0	; 240
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <LCD_goToRowColumn+0x16>
 2be:	60 5b       	subi	r22, 0xB0	; 176
 2c0:	86 2f       	mov	r24, r22
 2c2:	80 68       	ori	r24, 0x80	; 128
 2c4:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_sendCommand>
 2c8:	08 95       	ret

000002ca <LCD_displayStringRowColumn>:
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ea 01       	movw	r28, r20
 2d0:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_goToRowColumn>
 2d4:	ce 01       	movw	r24, r28
 2d6:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_displayString>
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <LCD_clearScreen>:



void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_sendCommand>
 2e6:	08 95       	ret

000002e8 <main>:

#include "headers/lcd.h"
#include "headers/keypad.h"
#include <string.h>
int main(void)
{
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <main+0x10>
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <main+0x12>
 2fa:	1f 92       	push	r1
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
 300:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_init>
		while(1)
		{
			
			
			key=KeyPad_getPressedKey();
			psswrd[i%4]= key;
 304:	ce 01       	movw	r24, r28
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	7c 01       	movw	r14, r24
 30a:	d8 2e       	mov	r13, r24
 30c:	0f 2d       	mov	r16, r15
	
	char key,i,flag=0;
	char psswrd[5];
	while (1)
	{
		LCD_displayString("enter the psswrd");
 30e:	80 e6       	ldi	r24, 0x60	; 96
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"psswrd: ");
 316:	41 e7       	ldi	r20, 0x71	; 113
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,8);
 322:	68 e0       	ldi	r22, 0x08	; 8
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_goToRowColumn>
		i=0;
 32a:	10 e0       	ldi	r17, 0x00	; 0
		while(1)
		{
			
			
			key=KeyPad_getPressedKey();
 32c:	0e 94 51 00 	call	0xa2	; 0xa2 <KeyPad_getPressedKey>
			psswrd[i%4]= key;
 330:	21 2f       	mov	r18, r17
 332:	23 70       	andi	r18, 0x03	; 3
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	f7 01       	movw	r30, r14
 338:	e2 0f       	add	r30, r18
 33a:	f3 1f       	adc	r31, r19
 33c:	80 83       	st	Z, r24
			psswrd[(i%4)+1]='\0';
 33e:	e2 e0       	ldi	r30, 0x02	; 2
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ec 0f       	add	r30, r28
 344:	fd 1f       	adc	r31, r29
 346:	e2 0f       	add	r30, r18
 348:	f3 1f       	adc	r31, r19
 34a:	10 82       	st	Z, r1
			i++;
 34c:	1f 5f       	subi	r17, 0xFF	; 255
			
			LCD_goToRowColumn(1,8);
 34e:	68 e0       	ldi	r22, 0x08	; 8
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_goToRowColumn>
			LCD_displayString(psswrd);
 356:	8d 2d       	mov	r24, r13
 358:	90 2f       	mov	r25, r16
 35a:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_displayString>
			if(i>=4){
 35e:	14 30       	cpi	r17, 0x04	; 4
 360:	29 f7       	brne	.-54     	; 0x32c <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 362:	9f e9       	ldi	r25, 0x9F	; 159
 364:	26 e8       	ldi	r18, 0x86	; 134
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	91 50       	subi	r25, 0x01	; 1
 36a:	20 40       	sbci	r18, 0x00	; 0
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x80>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x8a>
 372:	00 00       	nop
				_delay_ms(500);
				LCD_clearScreen();
 374:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_clearScreen>
				if (!strcmp(psswrd,"1234"))
 378:	6a e7       	ldi	r22, 0x7A	; 122
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	8d 2d       	mov	r24, r13
 37e:	90 2f       	mov	r25, r16
 380:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <strcmp>
 384:	89 2b       	or	r24, r25
 386:	b1 f0       	breq	.+44     	; 0x3b4 <main+0xcc>
				{
					LCD_displayString("successful :D");
					flag=1;
					break;
					}else{
					LCD_displayString("WRONG PSSWRD :(");
 388:	8d e8       	ldi	r24, 0x8D	; 141
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_displayString>
					LCD_displayStringRowColumn(1,3,"try again");
 390:	4d e9       	ldi	r20, 0x9D	; 157
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	63 e0       	ldi	r22, 0x03	; 3
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_displayStringRowColumn>
 39c:	9f e7       	ldi	r25, 0x7F	; 127
 39e:	2a e1       	ldi	r18, 0x1A	; 26
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	91 50       	subi	r25, 0x01	; 1
 3a4:	20 40       	sbci	r18, 0x00	; 0
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0xba>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0xc4>
 3ac:	00 00       	nop
					_delay_ms(2000);
					LCD_clearScreen();
 3ae:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_clearScreen>
 3b2:	ad cf       	rjmp	.-166    	; 0x30e <main+0x26>
			if(i>=4){
				_delay_ms(500);
				LCD_clearScreen();
				if (!strcmp(psswrd,"1234"))
				{
					LCD_displayString("successful :D");
 3b4:	8f e7       	ldi	r24, 0x7F	; 127
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_displayString>
		if (flag) break;

		
		
	}
}
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	df 90       	pop	r13
 3d8:	08 95       	ret

000003da <__tablejump2__>:
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	05 90       	lpm	r0, Z+
 3e0:	f4 91       	lpm	r31, Z
 3e2:	e0 2d       	mov	r30, r0
 3e4:	09 94       	ijmp

000003e6 <strcmp>:
 3e6:	fb 01       	movw	r30, r22
 3e8:	dc 01       	movw	r26, r24
 3ea:	8d 91       	ld	r24, X+
 3ec:	01 90       	ld	r0, Z+
 3ee:	80 19       	sub	r24, r0
 3f0:	01 10       	cpse	r0, r1
 3f2:	d9 f3       	breq	.-10     	; 0x3ea <strcmp+0x4>
 3f4:	99 0b       	sbc	r25, r25
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
