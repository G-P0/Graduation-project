
workbeanch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000532  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00000532  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001489  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c6  00000000  00000000  00001c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a6b  00000000  00000000  000025cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  00003038  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000563  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cd3  00000000  00000000  000037b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000448a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	f5 00       	.word	0x00f5	; ????
  56:	d7 00       	.word	0x00d7	; ????
  58:	d9 00       	.word	0x00d9	; ????
  5a:	db 00       	.word	0x00db	; ????
  5c:	dd 00       	.word	0x00dd	; ????
  5e:	df 00       	.word	0x00df	; ????
  60:	e1 00       	.word	0x00e1	; ????
  62:	e3 00       	.word	0x00e3	; ????
  64:	e5 00       	.word	0x00e5	; ????
  66:	e7 00       	.word	0x00e7	; ????
  68:	e9 00       	.word	0x00e9	; ????
  6a:	eb 00       	.word	0x00eb	; ????
  6c:	ed 00       	.word	0x00ed	; ????
  6e:	ef 00       	.word	0x00ef	; ????
  70:	f1 00       	.word	0x00f1	; ????
  72:	f3 00       	.word	0x00f3	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e2 e3       	ldi	r30, 0x32	; 50
  88:	f5 e0       	ldi	r31, 0x05	; 5
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	aa 3c       	cpi	r26, 0xCA	; 202
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  9a:	0c 94 97 02 	jmp	0x52e	; 0x52e <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <EEPROM_write>:

/* EEPROM write Byte into EEPROM at specific address */
void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(!BIT_IS_CLEAR(EECR,EEWE));
  a2:	e1 99       	sbic	0x1c, 1	; 28
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <EEPROM_write>
	;
	/* Set up address and data registers */
	EEAR = uiAddress;
  a6:	9f bb       	out	0x1f, r25	; 31
  a8:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  aa:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	SET_BIT(EECR,EEMWE);
  ac:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	SET_BIT(EECR,EEWE);
  ae:	e1 9a       	sbi	0x1c, 1	; 28
  b0:	08 95       	ret

000000b2 <EEPROM_read>:

/* EEPROM read Byte from EEPROM at specific address */
uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(!BIT_IS_CLEAR(EECR,EEWE));
  b2:	e1 99       	sbic	0x1c, 1	; 28
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
  b6:	9f bb       	out	0x1f, r25	; 31
  b8:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	SET_BIT(EECR,EERE);
  ba:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
  bc:	8d b3       	in	r24, 0x1d	; 29
}
  be:	08 95       	ret

000000c0 <EEPROM_WriteNByte>:


/* EEPROM write N number of Bytes into EEPROM at specific address */
void EEPROM_WriteNByte(uint16_t uiAddress, uint8_t *ucData,uint16_t uiNumberOfBytes)
{
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	8c 01       	movw	r16, r24
  ce:	7b 01       	movw	r14, r22
  d0:	ea 01       	movw	r28, r20
	
	while(uiNumberOfBytes!=0){
  d2:	20 97       	sbiw	r28, 0x00	; 0
  d4:	51 f0       	breq	.+20     	; 0xea <EEPROM_WriteNByte+0x2a>
		EEPROM_write(uiAddress,*ucData);
  d6:	f7 01       	movw	r30, r14
  d8:	61 91       	ld	r22, Z+
  da:	7f 01       	movw	r14, r30
  dc:	c8 01       	movw	r24, r16
  de:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_write>
		ucData++;
		uiAddress++;
  e2:	0f 5f       	subi	r16, 0xFF	; 255
  e4:	1f 4f       	sbci	r17, 0xFF	; 255
		uiNumberOfBytes--;
  e6:	21 97       	sbiw	r28, 0x01	; 1

/* EEPROM write N number of Bytes into EEPROM at specific address */
void EEPROM_WriteNByte(uint16_t uiAddress, uint8_t *ucData,uint16_t uiNumberOfBytes)
{
	
	while(uiNumberOfBytes!=0){
  e8:	b1 f7       	brne	.-20     	; 0xd6 <EEPROM_WriteNByte+0x16>
		EEPROM_write(uiAddress,*ucData);
		ucData++;
		uiAddress++;
		uiNumberOfBytes--;
	}
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	ff 90       	pop	r15
  f4:	ef 90       	pop	r14
  f6:	08 95       	ret

000000f8 <EEPROM_readNByte>:
/* EEPROM read N number of Bytes from EEPROM at specific address and copy it into ucDataRam pointer */

void EEPROM_readNByte(uint16_t uiAddress,uint8_t *ucDataRam,uint16_t uiNumberOfBytes){
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	8c 01       	movw	r16, r24
 106:	7b 01       	movw	r14, r22
 108:	ea 01       	movw	r28, r20
	
	while (uiNumberOfBytes!=0){
 10a:	20 97       	sbiw	r28, 0x00	; 0
 10c:	51 f0       	breq	.+20     	; 0x122 <EEPROM_readNByte+0x2a>
		*ucDataRam=EEPROM_read(uiAddress);
 10e:	c8 01       	movw	r24, r16
 110:	0e 94 59 00 	call	0xb2	; 0xb2 <EEPROM_read>
 114:	f7 01       	movw	r30, r14
 116:	81 93       	st	Z+, r24
 118:	7f 01       	movw	r14, r30
		uiAddress++;
 11a:	0f 5f       	subi	r16, 0xFF	; 255
 11c:	1f 4f       	sbci	r17, 0xFF	; 255
		ucDataRam++;
		uiNumberOfBytes--;
 11e:	21 97       	sbiw	r28, 0x01	; 1
}
/* EEPROM read N number of Bytes from EEPROM at specific address and copy it into ucDataRam pointer */

void EEPROM_readNByte(uint16_t uiAddress,uint8_t *ucDataRam,uint16_t uiNumberOfBytes){
	
	while (uiNumberOfBytes!=0){
 120:	b1 f7       	brne	.-20     	; 0x10e <EEPROM_readNByte+0x16>
		*ucDataRam=EEPROM_read(uiAddress);
		uiAddress++;
		ucDataRam++;
		uiNumberOfBytes--;
	}
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	ef 90       	pop	r14
 12e:	08 95       	ret

00000130 <KeyPad_getPressedKey>:

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
 130:	a0 e1       	ldi	r26, 0x10	; 16
 132:	b0 e0       	ldi	r27, 0x00	; 0
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b11110000);
 134:	f0 ef       	ldi	r31, 0xF0	; 240
 */
static uint8_t KeyPad_4x4_adjustKeyNumber(uint8_t button_number);
#endif

/************************** Functions Definitions **********************/
uint8_t KeyPad_getPressedKey(void){
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	86 2f       	mov	r24, r22
		{
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			KEYPAD_PORT_DIR = (0b11110000);
 13c:	f7 bb       	out	0x17, r31	; 23

			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
 13e:	9d 01       	movw	r18, r26
 140:	06 2e       	mov	r0, r22
 142:	02 c0       	rjmp	.+4      	; 0x148 <KeyPad_getPressedKey+0x18>
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <KeyPad_getPressedKey+0x14>
 14c:	20 95       	com	r18
 14e:	28 bb       	out	0x18, r18	; 24
			for(row=0;row<N_row;row++) /* loop for rows */
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
 150:	b0 9b       	sbis	0x16, 0	; 22
 152:	0f c0       	rjmp	.+30     	; 0x172 <KeyPad_getPressedKey+0x42>
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	92 2f       	mov	r25, r18
 15a:	46 b3       	in	r20, 0x16	; 22
 15c:	e2 2f       	mov	r30, r18
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	02 2e       	mov	r0, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <KeyPad_getPressedKey+0x38>
 164:	55 95       	asr	r21
 166:	47 95       	ror	r20
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <KeyPad_getPressedKey+0x34>
 16c:	40 fd       	sbrc	r20, 0
 16e:	3f c0       	rjmp	.+126    	; 0x1ee <KeyPad_getPressedKey+0xbe>
 170:	02 c0       	rjmp	.+4      	; 0x176 <KeyPad_getPressedKey+0x46>
 172:	e0 e0       	ldi	r30, 0x00	; 0
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for(row=0;row<N_row;row++) /* loop for rows */
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <KeyPad_getPressedKey+0x50>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	ea 95       	dec	r30
 182:	e2 f7       	brpl	.-8      	; 0x17c <KeyPad_getPressedKey+0x4c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
				{	while(BIT_IS_CLEAR(KEYPAD_PORT_IN,row));/* will active when you release the button*/
 184:	26 b3       	in	r18, 0x16	; 22
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	24 23       	and	r18, r20
 18a:	35 23       	and	r19, r21
 18c:	23 2b       	or	r18, r19
 18e:	d1 f3       	breq	.-12     	; 0x184 <KeyPad_getPressedKey+0x54>
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	99 0f       	add	r25, r25
 194:	99 0f       	add	r25, r25
 196:	89 0f       	add	r24, r25

#elif (N_col == 4)

static uint8_t KeyPad_4x4_adjustKeyNumber(uint8_t button_number)
{
	switch(button_number)
 198:	48 2f       	mov	r20, r24
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	fa 01       	movw	r30, r20
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	e0 31       	cpi	r30, 0x10	; 16
 1a2:	f1 05       	cpc	r31, r1
 1a4:	88 f5       	brcc	.+98     	; 0x208 <KeyPad_getPressedKey+0xd8>
 1a6:	e6 5d       	subi	r30, 0xD6	; 214
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	0c 94 88 02 	jmp	0x510	; 0x510 <__tablejump2__>
	{
		case 1: return '1';
				break;
		case 2: return '2';
 1ae:	82 e3       	ldi	r24, 0x32	; 50
 1b0:	08 95       	ret
				break;
		case 3: return '3';
 1b2:	83 e3       	ldi	r24, 0x33	; 51
 1b4:	08 95       	ret
				break;
		case 4: return 'a'; /* ASCII Code of 'a' */
 1b6:	81 e6       	ldi	r24, 0x61	; 97
 1b8:	08 95       	ret
				break;
		case 5: return '4';
 1ba:	84 e3       	ldi	r24, 0x34	; 52
 1bc:	08 95       	ret
				break;
		case 6: return '5';
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	08 95       	ret
				break;
		case 7: return '6';
 1c2:	86 e3       	ldi	r24, 0x36	; 54
 1c4:	08 95       	ret
				break;
		case 8: return 'b'; /* ASCII Code of 'b' */
 1c6:	82 e6       	ldi	r24, 0x62	; 98
 1c8:	08 95       	ret
				break;
		case 9: return '7';
 1ca:	87 e3       	ldi	r24, 0x37	; 55
 1cc:	08 95       	ret
				break;
		case 10: return '8';
 1ce:	88 e3       	ldi	r24, 0x38	; 56
 1d0:	08 95       	ret
				break;
		case 11: return '9';
 1d2:	89 e3       	ldi	r24, 0x39	; 57
 1d4:	08 95       	ret
				break;
		case 12: return 'c'; /* ASCII Code of 'c' */
 1d6:	83 e6       	ldi	r24, 0x63	; 99
 1d8:	08 95       	ret
				break;
		case 13: return '*';  /* ASCII of '*' */
 1da:	8a e2       	ldi	r24, 0x2A	; 42
 1dc:	08 95       	ret
				break;
		case 14: return '0';
 1de:	80 e3       	ldi	r24, 0x30	; 48
 1e0:	08 95       	ret
				break;
		case 15: return '#'; /* ASCII Code of '#' */
 1e2:	83 e2       	ldi	r24, 0x23	; 35
 1e4:	08 95       	ret
				break;
		case 16: return 'd'; /* ASCII Code of 'd' */
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	08 95       	ret

static uint8_t KeyPad_4x4_adjustKeyNumber(uint8_t button_number)
{
	switch(button_number)
	{
		case 1: return '1';
 1ea:	81 e3       	ldi	r24, 0x31	; 49
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
				{	while(BIT_IS_CLEAR(KEYPAD_PORT_IN,row));/* will active when you release the button*/
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
 1ec:	08 95       	ret
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
			/*
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for(row=0;row<N_row;row++) /* loop for rows */
 1f2:	24 30       	cpi	r18, 0x04	; 4
 1f4:	31 05       	cpc	r19, r1
 1f6:	09 f0       	breq	.+2      	; 0x1fa <KeyPad_getPressedKey+0xca>
 1f8:	af cf       	rjmp	.-162    	; 0x158 <KeyPad_getPressedKey+0x28>
 1fa:	6f 5f       	subi	r22, 0xFF	; 255
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255
/************************** Functions Definitions **********************/
uint8_t KeyPad_getPressedKey(void){
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 1fe:	64 30       	cpi	r22, 0x04	; 4
 200:	71 05       	cpc	r23, r1
 202:	09 f0       	breq	.+2      	; 0x206 <KeyPad_getPressedKey+0xd6>
 204:	9a cf       	rjmp	.-204    	; 0x13a <KeyPad_getPressedKey+0xa>
 206:	97 cf       	rjmp	.-210    	; 0x136 <KeyPad_getPressedKey+0x6>
					#endif
				}
			}
		}
	}
}
 208:	08 95       	ret

0000020a <LCD_sendCommand>:
void LCD_intgerToString(int data)
{
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* itoa convert int to char, 10 for decimal */
	LCD_displayString(buff);
}
 20a:	90 98       	cbi	0x12, 0	; 18
 20c:	91 98       	cbi	0x12, 1	; 18
 20e:	e9 ef       	ldi	r30, 0xF9	; 249
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCD_sendCommand+0x8>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_sendCommand+0xe>
 218:	00 00       	nop
 21a:	93 9a       	sbi	0x12, 3	; 18
 21c:	e9 ef       	ldi	r30, 0xF9	; 249
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_sendCommand+0x16>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_sendCommand+0x1c>
 226:	00 00       	nop
 228:	98 2f       	mov	r25, r24
 22a:	90 7f       	andi	r25, 0xF0	; 240
 22c:	95 bb       	out	0x15, r25	; 21
 22e:	e9 ef       	ldi	r30, 0xF9	; 249
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_sendCommand+0x28>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_sendCommand+0x2e>
 238:	00 00       	nop
 23a:	93 98       	cbi	0x12, 3	; 18
 23c:	e9 ef       	ldi	r30, 0xF9	; 249
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_sendCommand+0x36>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_sendCommand+0x3c>
 246:	00 00       	nop
 248:	93 9a       	sbi	0x12, 3	; 18
 24a:	e9 ef       	ldi	r30, 0xF9	; 249
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_sendCommand+0x44>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_sendCommand+0x4a>
 254:	00 00       	nop
 256:	f0 e1       	ldi	r31, 0x10	; 16
 258:	8f 9f       	mul	r24, r31
 25a:	c0 01       	movw	r24, r0
 25c:	11 24       	eor	r1, r1
 25e:	85 bb       	out	0x15, r24	; 21
 260:	89 ef       	ldi	r24, 0xF9	; 249
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <LCD_sendCommand+0x5a>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_sendCommand+0x60>
 26a:	00 00       	nop
 26c:	93 98       	cbi	0x12, 3	; 18
 26e:	e9 ef       	ldi	r30, 0xF9	; 249
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_sendCommand+0x68>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_sendCommand+0x6e>
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <LCD_init>:
 27c:	81 b3       	in	r24, 0x11	; 17
 27e:	8b 60       	ori	r24, 0x0B	; 11
 280:	81 bb       	out	0x11, r24	; 17
 282:	84 b3       	in	r24, 0x14	; 20
 284:	80 6f       	ori	r24, 0xF0	; 240
 286:	84 bb       	out	0x14, r24	; 20
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_sendCommand>
 28e:	88 e2       	ldi	r24, 0x28	; 40
 290:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_sendCommand>
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_sendCommand>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_sendCommand>
 2a0:	8c e0       	ldi	r24, 0x0C	; 12
 2a2:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_sendCommand>
 2a6:	08 95       	ret

000002a8 <LCD_displayCharacter>:
 2a8:	90 9a       	sbi	0x12, 0	; 18
 2aa:	91 98       	cbi	0x12, 1	; 18
 2ac:	e9 ef       	ldi	r30, 0xF9	; 249
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_displayCharacter+0x8>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_displayCharacter+0xe>
 2b6:	00 00       	nop
 2b8:	93 9a       	sbi	0x12, 3	; 18
 2ba:	e9 ef       	ldi	r30, 0xF9	; 249
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_displayCharacter+0x16>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_displayCharacter+0x1c>
 2c4:	00 00       	nop
 2c6:	98 2f       	mov	r25, r24
 2c8:	90 7f       	andi	r25, 0xF0	; 240
 2ca:	95 bb       	out	0x15, r25	; 21
 2cc:	e9 ef       	ldi	r30, 0xF9	; 249
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCD_displayCharacter+0x28>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <LCD_displayCharacter+0x2e>
 2d6:	00 00       	nop
 2d8:	93 98       	cbi	0x12, 3	; 18
 2da:	e9 ef       	ldi	r30, 0xF9	; 249
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_displayCharacter+0x36>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_displayCharacter+0x3c>
 2e4:	00 00       	nop
 2e6:	93 9a       	sbi	0x12, 3	; 18
 2e8:	e9 ef       	ldi	r30, 0xF9	; 249
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_displayCharacter+0x44>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_displayCharacter+0x4a>
 2f2:	00 00       	nop
 2f4:	f0 e1       	ldi	r31, 0x10	; 16
 2f6:	8f 9f       	mul	r24, r31
 2f8:	c0 01       	movw	r24, r0
 2fa:	11 24       	eor	r1, r1
 2fc:	85 bb       	out	0x15, r24	; 21
 2fe:	89 ef       	ldi	r24, 0xF9	; 249
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <LCD_displayCharacter+0x5a>
 306:	00 c0       	rjmp	.+0      	; 0x308 <LCD_displayCharacter+0x60>
 308:	00 00       	nop
 30a:	93 98       	cbi	0x12, 3	; 18
 30c:	e9 ef       	ldi	r30, 0xF9	; 249
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <LCD_displayCharacter+0x68>
 314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_displayCharacter+0x6e>
 316:	00 00       	nop
 318:	08 95       	ret

0000031a <LCD_displayString>:
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
 320:	88 81       	ld	r24, Y
 322:	88 23       	and	r24, r24
 324:	31 f0       	breq	.+12     	; 0x332 <LCD_displayString+0x18>
 326:	21 96       	adiw	r28, 0x01	; 1
 328:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_displayCharacter>
 32c:	89 91       	ld	r24, Y+
 32e:	81 11       	cpse	r24, r1
 330:	fb cf       	rjmp	.-10     	; 0x328 <LCD_displayString+0xe>
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <LCD_goToRowColumn>:
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	31 f0       	breq	.+12     	; 0x348 <LCD_goToRowColumn+0x10>
 33c:	83 30       	cpi	r24, 0x03	; 3
 33e:	31 f0       	breq	.+12     	; 0x34c <LCD_goToRowColumn+0x14>
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	29 f4       	brne	.+10     	; 0x34e <LCD_goToRowColumn+0x16>
 344:	60 5c       	subi	r22, 0xC0	; 192
 346:	03 c0       	rjmp	.+6      	; 0x34e <LCD_goToRowColumn+0x16>
 348:	60 5f       	subi	r22, 0xF0	; 240
 34a:	01 c0       	rjmp	.+2      	; 0x34e <LCD_goToRowColumn+0x16>
 34c:	60 5b       	subi	r22, 0xB0	; 176
 34e:	86 2f       	mov	r24, r22
 350:	80 68       	ori	r24, 0x80	; 128
 352:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_sendCommand>
 356:	08 95       	ret

00000358 <LCD_displayStringRowColumn>:
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	ea 01       	movw	r28, r20
 35e:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_goToRowColumn>
 362:	ce 01       	movw	r24, r28
 364:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_displayString>
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <LCD_clearScreen>:



void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_sendCommand>
 374:	08 95       	ret

00000376 <Timer1_Fast_PWM_Init>:
 */ 
#include "motors.h"

void Timer1_Fast_PWM_Init(unsigned short duty_cycle)
{
	TCNT1 = 0;		/* Set timer1 initial count to zero */
 376:	1d bc       	out	0x2d, r1	; 45
 378:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;	/* Set TOP count for timer1 in ICR1 register */
 37a:	23 ec       	ldi	r18, 0xC3	; 195
 37c:	39 e0       	ldi	r19, 0x09	; 9
 37e:	37 bd       	out	0x27, r19	; 39
 380:	26 bd       	out	0x26, r18	; 38

	OCR1A = duty_cycle; /* Set the compare value */
 382:	9b bd       	out	0x2b, r25	; 43
 384:	8a bd       	out	0x2a, r24	; 42


	TCCR1A = (1<<WGM11) | (1<<COM1A1);
 386:	82 e8       	ldi	r24, 0x82	; 130
 388:	8f bd       	out	0x2f, r24	; 47

	/* Configure timer control register TCCR1A
	 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=01 WGM13=1
	 * 2. Prescaler = F_CPU/64
     */
	TCCR1B = (1<<WGM12) | (1<<WGM13) | (1<<CS10) | (1<<CS11);
 38a:	8b e1       	ldi	r24, 0x1B	; 27
 38c:	8e bd       	out	0x2e, r24	; 46
 38e:	08 95       	ret

00000390 <main>:
#include "headers/libs.h"
#include "headers/EEPROM.h"
#include "headers/motors.h"

int main(void)
{
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	2a 97       	sbiw	r28, 0x0a	; 10
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	de bf       	out	0x3e, r29	; 62
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	cd bf       	out	0x3d, r28	; 61
	// disable jtag protocol
	    MCUCSR = (1<<JTD);
 3ae:	80 e8       	ldi	r24, 0x80	; 128
 3b0:	84 bf       	out	0x34, r24	; 52
	    MCUCSR = (1<<JTD);
 3b2:	84 bf       	out	0x34, r24	; 52
	uint8_t i;
	char key;
	char psswrd[5];
	char GATE_PASSWORD[PASS_LEN+1];
	
	DDRD |= (1<<PD5); // for motor out pin
 3b4:	8d 9a       	sbi	0x11, 5	; 17
	
	EEPROM_WriteNByte(GATE_PASSWORD_ADDRESS,(uint8_t*)default_pass,PASS_LEN);
 3b6:	44 e0       	ldi	r20, 0x04	; 4
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	60 e6       	ldi	r22, 0x60	; 96
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	80 e1       	ldi	r24, 0x10	; 16
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 60 00 	call	0xc0	; 0xc0 <EEPROM_WriteNByte>
	LCD_init();
 3c6:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ca:	87 ea       	ldi	r24, 0xA7	; 167
 3cc:	91 e6       	ldi	r25, 0x61	; 97
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x3e>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x44>
 3d4:	00 00       	nop
	_delay_ms(100);
	
	while (1)
	{
		LCD_clearScreen();
 3d6:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_clearScreen>
		LCD_displayString("check out lights");
 3da:	85 e6       	ldi	r24, 0x65	; 101
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_displayString>
			LCD_goToRowColumn(1,8);
			psswrd[0]='\0';
			i=0;
			while(i<PASS_LEN){
				key=KeyPad_getPressedKey();
				psswrd[i%PASS_LEN]= key;
 3e2:	ce 01       	movw	r24, r28
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	7c 01       	movw	r14, r24
 3e8:	d8 2e       	mov	r13, r24
 3ea:	0f 2d       	mov	r16, r15
		
		while(1)
		{
			
			
			LCD_clearScreen();
 3ec:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_clearScreen>
			LCD_displayString("enter the psswrd");
 3f0:	86 e7       	ldi	r24, 0x76	; 118
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"psswrd: ");
 3f8:	47 e8       	ldi	r20, 0x87	; 135
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_displayStringRowColumn>
			LCD_goToRowColumn(1,8);
 404:	68 e0       	ldi	r22, 0x08	; 8
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_goToRowColumn>
			psswrd[0]='\0';
 40c:	19 82       	std	Y+1, r1	; 0x01
			i=0;
 40e:	10 e0       	ldi	r17, 0x00	; 0
			while(i<PASS_LEN){
				key=KeyPad_getPressedKey();
 410:	0e 94 98 00 	call	0x130	; 0x130 <KeyPad_getPressedKey>
				psswrd[i%PASS_LEN]= key;
 414:	21 2f       	mov	r18, r17
 416:	23 70       	andi	r18, 0x03	; 3
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	f7 01       	movw	r30, r14
 41c:	e2 0f       	add	r30, r18
 41e:	f3 1f       	adc	r31, r19
 420:	80 83       	st	Z, r24
				psswrd[(i%PASS_LEN)+1]='\0';
 422:	e2 e0       	ldi	r30, 0x02	; 2
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	ec 0f       	add	r30, r28
 428:	fd 1f       	adc	r31, r29
 42a:	e2 0f       	add	r30, r18
 42c:	f3 1f       	adc	r31, r19
 42e:	10 82       	st	Z, r1
				i++;
 430:	1f 5f       	subi	r17, 0xFF	; 255
				LCD_goToRowColumn(1,8);
 432:	68 e0       	ldi	r22, 0x08	; 8
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_goToRowColumn>
				LCD_displayString(psswrd);
 43a:	8d 2d       	mov	r24, r13
 43c:	90 2f       	mov	r25, r16
 43e:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_displayString>
			LCD_displayString("enter the psswrd");
			LCD_displayStringRowColumn(1,0,"psswrd: ");
			LCD_goToRowColumn(1,8);
			psswrd[0]='\0';
			i=0;
			while(i<PASS_LEN){
 442:	14 30       	cpi	r17, 0x04	; 4
 444:	29 f7       	brne	.-54     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 446:	9f e9       	ldi	r25, 0x9F	; 159
 448:	26 e8       	ldi	r18, 0x86	; 134
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	91 50       	subi	r25, 0x01	; 1
 44e:	20 40       	sbci	r18, 0x00	; 0
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 456:	00 00       	nop
				i++;
				LCD_goToRowColumn(1,8);
				LCD_displayString(psswrd);
			}
			_delay_ms(500);
			LCD_clearScreen();
 458:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_clearScreen>
			EEPROM_readNByte( GATE_PASSWORD_ADDRESS, (uint8_t *) GATE_PASSWORD, PASS_LEN);
 45c:	44 e0       	ldi	r20, 0x04	; 4
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	be 01       	movw	r22, r28
 462:	6a 5f       	subi	r22, 0xFA	; 250
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	80 e1       	ldi	r24, 0x10	; 16
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 7c 00 	call	0xf8	; 0xf8 <EEPROM_readNByte>
			if (!strcmp(psswrd,GATE_PASSWORD)){
 46e:	be 01       	movw	r22, r28
 470:	6a 5f       	subi	r22, 0xFA	; 250
 472:	7f 4f       	sbci	r23, 0xFF	; 255
 474:	8d 2d       	mov	r24, r13
 476:	90 2f       	mov	r25, r16
 478:	0e 94 8e 02 	call	0x51c	; 0x51c <strcmp>
 47c:	89 2b       	or	r24, r25
 47e:	a1 f0       	breq	.+40     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
				_delay_ms(3000);
				break;
				
			}
			else{
				LCD_displayString("WRONG PSSWRD :(");
 480:	8f ea       	ldi	r24, 0xAF	; 175
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_displayString>
				LCD_displayStringRowColumn(1,3,"try again");
 488:	4f eb       	ldi	r20, 0xBF	; 191
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	63 e0       	ldi	r22, 0x03	; 3
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_displayStringRowColumn>
 494:	9f eb       	ldi	r25, 0xBF	; 191
 496:	27 e2       	ldi	r18, 0x27	; 39
 498:	89 e0       	ldi	r24, 0x09	; 9
 49a:	91 50       	subi	r25, 0x01	; 1
 49c:	20 40       	sbci	r18, 0x00	; 0
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
 4a6:	a2 cf       	rjmp	.-188    	; 0x3ec <main+0x5c>
			}
			_delay_ms(500);
			LCD_clearScreen();
			EEPROM_readNByte( GATE_PASSWORD_ADDRESS, (uint8_t *) GATE_PASSWORD, PASS_LEN);
			if (!strcmp(psswrd,GATE_PASSWORD)){
				LCD_displayString("gate opens now");
 4a8:	80 e9       	ldi	r24, 0x90	; 144
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_displayString>
				Gate_open();
 4b0:	8b eb       	ldi	r24, 0xBB	; 187
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 bb 01 	call	0x376	; 0x376 <Timer1_Fast_PWM_Init>
 4b8:	9f eb       	ldi	r25, 0xBF	; 191
 4ba:	27 e2       	ldi	r18, 0x27	; 39
 4bc:	89 e0       	ldi	r24, 0x09	; 9
 4be:	91 50       	subi	r25, 0x01	; 1
 4c0:	20 40       	sbci	r18, 0x00	; 0
 4c2:	80 40       	sbci	r24, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c8:	00 00       	nop
			}
			
			
		} // end while loop of
		
		LCD_clearScreen();
 4ca:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_clearScreen>
		LCD_displayString("gate will close");
 4ce:	8f e9       	ldi	r24, 0x9F	; 159
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_displayString>
		Gate_close();
 4d6:	8c e7       	ldi	r24, 0x7C	; 124
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 bb 01 	call	0x376	; 0x376 <Timer1_Fast_PWM_Init>
 4de:	9f e3       	ldi	r25, 0x3F	; 63
 4e0:	22 e4       	ldi	r18, 0x42	; 66
 4e2:	8f e0       	ldi	r24, 0x0F	; 15
 4e4:	91 50       	subi	r25, 0x01	; 1
 4e6:	20 40       	sbci	r18, 0x00	; 0
 4e8:	80 40       	sbci	r24, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ee:	00 00       	nop
		break;
		
	} // end the main while loop


} // end main
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	2a 96       	adiw	r28, 0x0a	; 10
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	f8 94       	cli
 4fa:	de bf       	out	0x3e, r29	; 62
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	cd bf       	out	0x3d, r28	; 61
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	ff 90       	pop	r15
 50a:	ef 90       	pop	r14
 50c:	df 90       	pop	r13
 50e:	08 95       	ret

00000510 <__tablejump2__>:
 510:	ee 0f       	add	r30, r30
 512:	ff 1f       	adc	r31, r31
 514:	05 90       	lpm	r0, Z+
 516:	f4 91       	lpm	r31, Z
 518:	e0 2d       	mov	r30, r0
 51a:	09 94       	ijmp

0000051c <strcmp>:
 51c:	fb 01       	movw	r30, r22
 51e:	dc 01       	movw	r26, r24
 520:	8d 91       	ld	r24, X+
 522:	01 90       	ld	r0, Z+
 524:	80 19       	sub	r24, r0
 526:	01 10       	cpse	r0, r1
 528:	d9 f3       	breq	.-10     	; 0x520 <strcmp+0x4>
 52a:	99 0b       	sbc	r25, r25
 52c:	08 95       	ret

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
