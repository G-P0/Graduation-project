
workbeanch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  00000c44  00000cd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080013a  0080013a  00000db2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002101  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d6e  00000000  00000000  00003109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000128c  00000000  00000000  00003e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00005104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d8  00000000  00000000  000054ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001338  00000000  00000000  00005bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006efc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_1>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_3>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	34 01       	movw	r6, r8
  56:	16 01       	movw	r2, r12
  58:	18 01       	movw	r2, r16
  5a:	1a 01       	movw	r2, r20
  5c:	1c 01       	movw	r2, r24
  5e:	1e 01       	movw	r2, r28
  60:	20 01       	movw	r4, r0
  62:	22 01       	movw	r4, r4
  64:	24 01       	movw	r4, r8
  66:	26 01       	movw	r4, r12
  68:	28 01       	movw	r4, r16
  6a:	2a 01       	movw	r4, r20
  6c:	2c 01       	movw	r4, r24
  6e:	2e 01       	movw	r4, r28
  70:	30 01       	movw	r6, r0
  72:	32 01       	movw	r6, r4
  74:	a1 03       	fmuls	r18, r17
  76:	bd 03       	fmulsu	r19, r21
  78:	d9 03       	fmulsu	r21, r17
  7a:	f2 03       	fmuls	r23, r18
  7c:	0b 04       	cpc	r0, r11
  7e:	24 04       	cpc	r2, r4
  80:	3d 04       	cpc	r3, r13
  82:	56 04       	cpc	r5, r6
  84:	6f 04       	cpc	r6, r15
  86:	88 04       	cpc	r8, r8

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf e5       	ldi	r28, 0x5F	; 95
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a0 e6       	ldi	r26, 0x60	; 96
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e4 e4       	ldi	r30, 0x44	; 68
  9c:	fc e0       	ldi	r31, 0x0C	; 12
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	aa 33       	cpi	r26, 0x3A	; 58
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	aa e3       	ldi	r26, 0x3A	; 58
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	ad 34       	cpi	r26, 0x4D	; 77
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	0e 94 6e 02 	call	0x4dc	; 0x4dc <main>
  be:	0c 94 20 06 	jmp	0xc40	; 0xc40 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <ADC_start_conversion>:
	#endif
	
}

void ADC_start_conversion(){
	SET_BIT (ADCSRA,ADEN);										// enable ADC
  c6:	37 9a       	sbi	0x06, 7	; 6
	SET_BIT(ADCSRA,ADSC);										//start conversion
  c8:	36 9a       	sbi	0x06, 6	; 6
  ca:	08 95       	ret

000000cc <ADC_set_prescaler>:
}

void ADC_set_prescaler(uint8_t prescaler){
	ADCSRA &=~(0x07);									// reset  ADPS0-2 pins
  cc:	96 b1       	in	r25, 0x06	; 6
  ce:	98 7f       	andi	r25, 0xF8	; 248
  d0:	96 b9       	out	0x06, r25	; 6
	switch(prescaler)
  d2:	80 31       	cpi	r24, 0x10	; 16
  d4:	b9 f0       	breq	.+46     	; 0x104 <ADC_set_prescaler+0x38>
  d6:	38 f4       	brcc	.+14     	; 0xe6 <ADC_set_prescaler+0x1a>
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	71 f0       	breq	.+28     	; 0xf8 <ADC_set_prescaler+0x2c>
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	71 f0       	breq	.+28     	; 0xfc <ADC_set_prescaler+0x30>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	f1 f4       	brne	.+60     	; 0x120 <ADC_set_prescaler+0x54>
  e4:	07 c0       	rjmp	.+14     	; 0xf4 <ADC_set_prescaler+0x28>
  e6:	80 34       	cpi	r24, 0x40	; 64
  e8:	99 f0       	breq	.+38     	; 0x110 <ADC_set_prescaler+0x44>
  ea:	80 38       	cpi	r24, 0x80	; 128
  ec:	a9 f0       	breq	.+42     	; 0x118 <ADC_set_prescaler+0x4c>
  ee:	80 32       	cpi	r24, 0x20	; 32
  f0:	b9 f4       	brne	.+46     	; 0x120 <ADC_set_prescaler+0x54>
  f2:	0a c0       	rjmp	.+20     	; 0x108 <ADC_set_prescaler+0x3c>
	{
		case 2:
		ADCSRA |= (0x01);
  f4:	30 9a       	sbi	0x06, 0	; 6
		break;
  f6:	08 95       	ret
		case 4:
		ADCSRA |= (0x02);
  f8:	31 9a       	sbi	0x06, 1	; 6
		break;
  fa:	08 95       	ret
		case 8:
		ADCSRA |= (0x03);
  fc:	86 b1       	in	r24, 0x06	; 6
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	86 b9       	out	0x06, r24	; 6
		break;
 102:	08 95       	ret
		case 16:
		ADCSRA |= (0x04);
 104:	32 9a       	sbi	0x06, 2	; 6
		break;
 106:	08 95       	ret
		case 32:
		ADCSRA |= (0x05);
 108:	86 b1       	in	r24, 0x06	; 6
 10a:	85 60       	ori	r24, 0x05	; 5
 10c:	86 b9       	out	0x06, r24	; 6
		break;
 10e:	08 95       	ret
		case 64:
		ADCSRA |= (0x06);
 110:	86 b1       	in	r24, 0x06	; 6
 112:	86 60       	ori	r24, 0x06	; 6
 114:	86 b9       	out	0x06, r24	; 6
		break;
 116:	08 95       	ret
		case 128:
		ADCSRA |= (0x07);
 118:	86 b1       	in	r24, 0x06	; 6
 11a:	87 60       	ori	r24, 0x07	; 7
 11c:	86 b9       	out	0x06, r24	; 6
		break;
 11e:	08 95       	ret
		default:
		ADCSRA |= (0x00);
 120:	86 b1       	in	r24, 0x06	; 6
 122:	86 b9       	out	0x06, r24	; 6
 124:	08 95       	ret

00000126 <ADC_init>:
/************************************************************************/
/*                                                                      */
/************************************************************************/
void ADC_init(){
	
	CLEAR_BIT (ADC_port_DD,ADC_defualt_channel);					//set channel pin to be input
 126:	d0 98       	cbi	0x1a, 0	; 26
	ADMUX &=~(0x1f);
 128:	87 b1       	in	r24, 0x07	; 7
 12a:	80 7e       	andi	r24, 0xE0	; 224
 12c:	87 b9       	out	0x07, r24	; 7
	ADMUX |= ADC_defualt_channel & 0xFF;						// select channel using MUX0-4 bits
 12e:	87 b1       	in	r24, 0x07	; 7
 130:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (ADC_ref << 6);									// set ref at pin 7 6 of ADMUX
 132:	87 b1       	in	r24, 0x07	; 7
 134:	80 6c       	ori	r24, 0xC0	; 192
 136:	87 b9       	out	0x07, r24	; 7
	ADC_set_prescaler(ADC_prescaler);							// set prescaler
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_set_prescaler>
	#if (1 == ADC_data_leftAjust)
	ADMUX |=(ADC_data_leftAjust<<ADLAR)		;					// adjust data for left
 13e:	3d 9a       	sbi	0x07, 5	; 7
 140:	08 95       	ret

00000142 <ADC_read>:
}

uint16_t ADC_read()
{
	uint16_t result;
	while(BIT_IS_SET(ADCSRA,ADSC));
 142:	36 99       	sbic	0x06, 6	; 6
 144:	fe cf       	rjmp	.-4      	; 0x142 <ADC_read>
	#if (1 == ADC_data_leftAjust)
	result= ((0xFFFF & ADCH)<<2);
 146:	85 b1       	in	r24, 0x05	; 5
	return result;
 148:	90 e0       	ldi	r25, 0x00	; 0
	#else
	result =ADCL;
	result |=(0xffff&ADCH)<<8;
	return result;
	#endif
}
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	08 95       	ret

00000154 <ADC_select_channel>:

void ADC_select_channel(uint8_t channel){
			CLEAR_BIT (ADC_port_DD,channel) ;
 154:	9a b3       	in	r25, 0x1a	; 26
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	08 2e       	mov	r0, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <ADC_select_channel+0xe>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <ADC_select_channel+0xa>
 166:	20 95       	com	r18
 168:	29 23       	and	r18, r25
 16a:	2a bb       	out	0x1a, r18	; 26
			ADMUX &= ~(0x1f) ;
 16c:	97 b1       	in	r25, 0x07	; 7
 16e:	90 7e       	andi	r25, 0xE0	; 224
 170:	97 b9       	out	0x07, r25	; 7
			ADMUX |= ( 0xff & channel );
 172:	97 b1       	in	r25, 0x07	; 7
 174:	89 2b       	or	r24, r25
 176:	87 b9       	out	0x07, r24	; 7
 178:	08 95       	ret

0000017a <EEPROM_write>:

/* EEPROM write Byte into EEPROM at specific address */
void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(!BIT_IS_CLEAR(EECR,EEWE));
 17a:	e1 99       	sbic	0x1c, 1	; 28
 17c:	fe cf       	rjmp	.-4      	; 0x17a <EEPROM_write>
	;
	/* Set up address and data registers */
	EEAR = uiAddress;
 17e:	9f bb       	out	0x1f, r25	; 31
 180:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 182:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	SET_BIT(EECR,EEMWE);
 184:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	SET_BIT(EECR,EEWE);
 186:	e1 9a       	sbi	0x1c, 1	; 28
 188:	08 95       	ret

0000018a <EEPROM_read>:

/* EEPROM read Byte from EEPROM at specific address */
uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(!BIT_IS_CLEAR(EECR,EEWE));
 18a:	e1 99       	sbic	0x1c, 1	; 28
 18c:	fe cf       	rjmp	.-4      	; 0x18a <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
 18e:	9f bb       	out	0x1f, r25	; 31
 190:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	SET_BIT(EECR,EERE);
 192:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
 194:	8d b3       	in	r24, 0x1d	; 29
}
 196:	08 95       	ret

00000198 <EEPROM_WriteNByte>:


/* EEPROM write N number of Bytes into EEPROM at specific address */
void EEPROM_WriteNByte(uint16_t uiAddress, uint8_t *ucData,uint16_t uiNumberOfBytes)
{
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	8c 01       	movw	r16, r24
 1a6:	7b 01       	movw	r14, r22
 1a8:	ea 01       	movw	r28, r20
	
	while(uiNumberOfBytes!=0){
 1aa:	20 97       	sbiw	r28, 0x00	; 0
 1ac:	51 f0       	breq	.+20     	; 0x1c2 <EEPROM_WriteNByte+0x2a>
		EEPROM_write(uiAddress,*ucData);
 1ae:	f7 01       	movw	r30, r14
 1b0:	61 91       	ld	r22, Z+
 1b2:	7f 01       	movw	r14, r30
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 bd 00 	call	0x17a	; 0x17a <EEPROM_write>
		ucData++;
		uiAddress++;
 1ba:	0f 5f       	subi	r16, 0xFF	; 255
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
		uiNumberOfBytes--;
 1be:	21 97       	sbiw	r28, 0x01	; 1

/* EEPROM write N number of Bytes into EEPROM at specific address */
void EEPROM_WriteNByte(uint16_t uiAddress, uint8_t *ucData,uint16_t uiNumberOfBytes)
{
	
	while(uiNumberOfBytes!=0){
 1c0:	b1 f7       	brne	.-20     	; 0x1ae <EEPROM_WriteNByte+0x16>
		EEPROM_write(uiAddress,*ucData);
		ucData++;
		uiAddress++;
		uiNumberOfBytes--;
	}
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	ef 90       	pop	r14
 1ce:	08 95       	ret

000001d0 <EEPROM_readNByte>:
/* EEPROM read N number of Bytes from EEPROM at specific address and copy it into ucDataRam pointer */

void EEPROM_readNByte(uint16_t uiAddress,uint8_t *ucDataRam,uint16_t uiNumberOfBytes){
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	8c 01       	movw	r16, r24
 1de:	7b 01       	movw	r14, r22
 1e0:	ea 01       	movw	r28, r20
	
	while (uiNumberOfBytes!=0){
 1e2:	20 97       	sbiw	r28, 0x00	; 0
 1e4:	51 f0       	breq	.+20     	; 0x1fa <EEPROM_readNByte+0x2a>
		*ucDataRam=EEPROM_read(uiAddress);
 1e6:	c8 01       	movw	r24, r16
 1e8:	0e 94 c5 00 	call	0x18a	; 0x18a <EEPROM_read>
 1ec:	f7 01       	movw	r30, r14
 1ee:	81 93       	st	Z+, r24
 1f0:	7f 01       	movw	r14, r30
		uiAddress++;
 1f2:	0f 5f       	subi	r16, 0xFF	; 255
 1f4:	1f 4f       	sbci	r17, 0xFF	; 255
		ucDataRam++;
		uiNumberOfBytes--;
 1f6:	21 97       	sbiw	r28, 0x01	; 1
}
/* EEPROM read N number of Bytes from EEPROM at specific address and copy it into ucDataRam pointer */

void EEPROM_readNByte(uint16_t uiAddress,uint8_t *ucDataRam,uint16_t uiNumberOfBytes){
	
	while (uiNumberOfBytes!=0){
 1f8:	b1 f7       	brne	.-20     	; 0x1e6 <EEPROM_readNByte+0x16>
		*ucDataRam=EEPROM_read(uiAddress);
		uiAddress++;
		ucDataRam++;
		uiNumberOfBytes--;
	}
}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	08 95       	ret

00000208 <KeyPad_getPressedKey>:
		}
	}
	#else
	#if ( 1 == KEYPAD_UPPER_PORT_PINS)
	//setting the upper pin port as input
	KEYPAD_PORT_DIR &= ~( 0xf0 );
 208:	87 b3       	in	r24, 0x17	; 23
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	87 bb       	out	0x17, r24	; 23
	return KeyPad_4x4_withIC74922 ( (((KEYPAD_PORT_IN))>>4) + 1 );
 20e:	86 b3       	in	r24, 0x16	; 22
 210:	82 95       	swap	r24
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	8f 5f       	subi	r24, 0xFF	; 255

// if we are using ic 74922
#else
static uint8_t KeyPad_4x4_withIC74922(uint8_t button_number)
{
	switch(button_number)
 216:	48 2f       	mov	r20, r24
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	fa 01       	movw	r30, r20
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	e0 31       	cpi	r30, 0x10	; 16
 220:	f1 05       	cpc	r31, r1
 222:	18 f5       	brcc	.+70     	; 0x26a <KeyPad_getPressedKey+0x62>
 224:	e6 5d       	subi	r30, 0xD6	; 214
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__tablejump2__>
	{
		case 1: return '1';
		break;
		case 2: return '2';
 22c:	82 e3       	ldi	r24, 0x32	; 50
 22e:	08 95       	ret
		break;
		case 3: return '3';
 230:	83 e3       	ldi	r24, 0x33	; 51
 232:	08 95       	ret
		break;
		case 4: return 'a'; /* ASCII Code of 'a' */
 234:	81 e6       	ldi	r24, 0x61	; 97
 236:	08 95       	ret
		break;
		case 5: return '4';
 238:	84 e3       	ldi	r24, 0x34	; 52
 23a:	08 95       	ret
		break;
		case 6: return '5';
 23c:	85 e3       	ldi	r24, 0x35	; 53
 23e:	08 95       	ret
		break;
		case 7: return '6';
 240:	86 e3       	ldi	r24, 0x36	; 54
 242:	08 95       	ret
		break;
		case 8: return 'b'; /* ASCII Code of 'b' */
 244:	82 e6       	ldi	r24, 0x62	; 98
 246:	08 95       	ret
		break;
		case 9: return '7';
 248:	87 e3       	ldi	r24, 0x37	; 55
 24a:	08 95       	ret
		break;
		case 10: return '8';
 24c:	88 e3       	ldi	r24, 0x38	; 56
 24e:	08 95       	ret
		break;
		case 11: return '9';
 250:	89 e3       	ldi	r24, 0x39	; 57
 252:	08 95       	ret
		break;
		case 12: return 'c'; /* ASCII Code of 'c' */
 254:	83 e6       	ldi	r24, 0x63	; 99
 256:	08 95       	ret
		break;
		case 13: return '*';  /* ASCII of '*' */
 258:	8a e2       	ldi	r24, 0x2A	; 42
 25a:	08 95       	ret
		break;
		case 14: return '0';
 25c:	80 e3       	ldi	r24, 0x30	; 48
 25e:	08 95       	ret
		break;
		case 15: return '#'; /* ASCII Code of '#' */
 260:	83 e2       	ldi	r24, 0x23	; 35
 262:	08 95       	ret
		break;
		case 16: return 'd'; /* ASCII Code of 'd' */
 264:	84 e6       	ldi	r24, 0x64	; 100
 266:	08 95       	ret
#else
static uint8_t KeyPad_4x4_withIC74922(uint8_t button_number)
{
	switch(button_number)
	{
		case 1: return '1';
 268:	81 e3       	ldi	r24, 0x31	; 49
	//write code for lower pins here
	
	#endif // end if we use upper pins
	
	#endif // end if we use IC
}
 26a:	08 95       	ret

0000026c <LCD_sendCommand>:
	LCD_sendCommand(DISPLAY_ON);/* make sure that lcd is on*/
}

void LCD_sendCommand(uint8_t command)
{
	CLEAR_BIT(LCD_CTRL_PORT,RS);					/* Instruction Mode RS=0 */
 26c:	de 98       	cbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	ef ec       	ldi	r30, 0xCF	; 207
 270:	f7 e0       	ldi	r31, 0x07	; 7
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_sendCommand+0x6>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_sendCommand+0xc>
 278:	00 00       	nop
	//CLEAR_BIT(LCD_CTRL_PORT,RW);					/* write data to LCD so RW=0 */
	_delay_ms(1);									/* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E);						/* Enable LCD E=1 */
 27a:	df 9a       	sbi	0x1b, 7	; 27
 27c:	ef ec       	ldi	r30, 0xCF	; 207
 27e:	f7 e0       	ldi	r31, 0x07	; 7
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_sendCommand+0x14>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_sendCommand+0x1a>
 286:	00 00       	nop
	_delay_ms(1);									/* delay for processing Tpw - Tdsw = 190ns */
	#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS							/* if the higher pins in lcd is used */
	//rest the 
	LCD_DATA_PORT &=(!0xF0);
 288:	95 b3       	in	r25, 0x15	; 21
 28a:	15 ba       	out	0x15, r1	; 21
	LCD_DATA_PORT |= ((command & 0xF0));
 28c:	95 b3       	in	r25, 0x15	; 21
 28e:	28 2f       	mov	r18, r24
 290:	20 7f       	andi	r18, 0xF0	; 240
 292:	92 2b       	or	r25, r18
 294:	95 bb       	out	0x15, r25	; 21
 296:	ef ec       	ldi	r30, 0xCF	; 207
 298:	f7 e0       	ldi	r31, 0x07	; 7
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_sendCommand+0x2e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_sendCommand+0x34>
 2a0:	00 00       	nop
	LCD_DATA_PORT &=(!0x0F);
	LCD_DATA_PORT |= ((command >> 4) & 0x0F);
	#endif

	_delay_ms(1);			/* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 2a2:	df 98       	cbi	0x1b, 7	; 27
 2a4:	ef ec       	ldi	r30, 0xCF	; 207
 2a6:	f7 e0       	ldi	r31, 0x07	; 7
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_sendCommand+0x3c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_sendCommand+0x42>
 2ae:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 2b0:	df 9a       	sbi	0x1b, 7	; 27
 2b2:	ef ec       	ldi	r30, 0xCF	; 207
 2b4:	f7 e0       	ldi	r31, 0x07	; 7
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_sendCommand+0x4a>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <LCD_sendCommand+0x50>
 2bc:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT &=(!0xF0);
 2be:	95 b3       	in	r25, 0x15	; 21
 2c0:	15 ba       	out	0x15, r1	; 21
	LCD_DATA_PORT |= (command << 4) & 0xF0;
 2c2:	25 b3       	in	r18, 0x15	; 21
 2c4:	f0 e1       	ldi	r31, 0x10	; 16
 2c6:	8f 9f       	mul	r24, r31
 2c8:	c0 01       	movw	r24, r0
 2ca:	11 24       	eor	r1, r1
 2cc:	82 2b       	or	r24, r18
 2ce:	85 bb       	out	0x15, r24	; 21
 2d0:	8f ec       	ldi	r24, 0xCF	; 207
 2d2:	97 e0       	ldi	r25, 0x07	; 7
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_sendCommand+0x68>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_sendCommand+0x6e>
 2da:	00 00       	nop
	/* out the lowest 4 bits of the required command to the data bus D0 --> D3 */
	LCD_DATA_PORT &=(!0x0F);
	LCD_DATA_PORT |= (command & 0x0F);
	#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 2dc:	df 98       	cbi	0x1b, 7	; 27
 2de:	ef ec       	ldi	r30, 0xCF	; 207
 2e0:	f7 e0       	ldi	r31, 0x07	; 7
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCD_sendCommand+0x76>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCD_sendCommand+0x7c>
 2e8:	00 00       	nop
 2ea:	08 95       	ret

000002ec <LCD_init>:

#include "lcd.h"

void LCD_init(void)
{
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) ; //| (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
 2ec:	8a b3       	in	r24, 0x1a	; 26
 2ee:	80 6c       	ori	r24, 0xC0	; 192
 2f0:	8a bb       	out	0x1a, r24	; 26
	
	#if (DATA_BITS_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
 2f2:	84 b3       	in	r24, 0x14	; 20
 2f4:	80 6f       	ori	r24, 0xF0	; 240
 2f6:	84 bb       	out	0x14, r24	; 20
	#else
	LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
	#endif
	LCD_sendCommand(LCD_FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_sendCommand>
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINE_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
 2fe:	88 e2       	ldi	r24, 0x28	; 40
 300:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
	LCD_sendCommand(LCD_Eight_BIT_TWO_LINE_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
 304:	8c e0       	ldi	r24, 0x0C	; 12
 306:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON);/* make sure that lcd is on*/
 310:	8c e0       	ldi	r24, 0x0C	; 12
 312:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_sendCommand>
 316:	08 95       	ret

00000318 <LCD_displayCharacter>:
	#endif
}

void LCD_displayCharacter(uint8_t data)
{
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
 318:	de 9a       	sbi	0x1b, 6	; 27
 31a:	ef ec       	ldi	r30, 0xCF	; 207
 31c:	f7 e0       	ldi	r31, 0x07	; 7
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_displayCharacter+0x6>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_displayCharacter+0xc>
 324:	00 00       	nop
	//CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 326:	df 9a       	sbi	0x1b, 7	; 27
 328:	ef ec       	ldi	r30, 0xCF	; 207
 32a:	f7 e0       	ldi	r31, 0x07	; 7
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_displayCharacter+0x14>
 330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_displayCharacter+0x1a>
 332:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT &=(!0x0F);
 334:	95 b3       	in	r25, 0x15	; 21
 336:	15 ba       	out	0x15, r1	; 21
	LCD_DATA_PORT |= (data & 0xF0);
 338:	95 b3       	in	r25, 0x15	; 21
 33a:	28 2f       	mov	r18, r24
 33c:	20 7f       	andi	r18, 0xF0	; 240
 33e:	92 2b       	or	r25, r18
 340:	95 bb       	out	0x15, r25	; 21
 342:	ef ec       	ldi	r30, 0xCF	; 207
 344:	f7 e0       	ldi	r31, 0x07	; 7
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD_displayCharacter+0x2e>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_displayCharacter+0x34>
 34c:	00 00       	nop
	LCD_DATA_PORT &=(!0x0F);
	LCD_DATA_PORT |= ((data >> 4) & 0x0F);
	#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 34e:	df 98       	cbi	0x1b, 7	; 27
 350:	ef ec       	ldi	r30, 0xCF	; 207
 352:	f7 e0       	ldi	r31, 0x07	; 7
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <LCD_displayCharacter+0x3c>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_displayCharacter+0x42>
 35a:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 35c:	df 9a       	sbi	0x1b, 7	; 27
 35e:	ef ec       	ldi	r30, 0xCF	; 207
 360:	f7 e0       	ldi	r31, 0x07	; 7
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <LCD_displayCharacter+0x4a>
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_displayCharacter+0x50>
 368:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT &=(!0xF0);
 36a:	95 b3       	in	r25, 0x15	; 21
 36c:	15 ba       	out	0x15, r1	; 21
	LCD_DATA_PORT |= (data << 4) & 0xF0;
 36e:	25 b3       	in	r18, 0x15	; 21
 370:	f0 e1       	ldi	r31, 0x10	; 16
 372:	8f 9f       	mul	r24, r31
 374:	c0 01       	movw	r24, r0
 376:	11 24       	eor	r1, r1
 378:	82 2b       	or	r24, r18
 37a:	85 bb       	out	0x15, r24	; 21
 37c:	8f ec       	ldi	r24, 0xCF	; 207
 37e:	97 e0       	ldi	r25, 0x07	; 7
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <LCD_displayCharacter+0x68>
 384:	00 c0       	rjmp	.+0      	; 0x386 <LCD_displayCharacter+0x6e>
 386:	00 00       	nop
	LCD_DATA_PORT &=(!0xF0);
	LCD_DATA_PORT |= (data & 0x0F);
	#endif
	
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 388:	df 98       	cbi	0x1b, 7	; 27
 38a:	ef ec       	ldi	r30, 0xCF	; 207
 38c:	f7 e0       	ldi	r31, 0x07	; 7
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCD_displayCharacter+0x76>
 392:	00 c0       	rjmp	.+0      	; 0x394 <LCD_displayCharacter+0x7c>
 394:	00 00       	nop
 396:	08 95       	ret

00000398 <LCD_displayString>:
	_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}

void LCD_displayString(const char *Str)
{
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	ec 01       	movw	r28, r24
	while((*Str) != '\0')
 39e:	88 81       	ld	r24, Y
 3a0:	88 23       	and	r24, r24
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <LCD_displayString+0x18>
 3a4:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_displayCharacter(*Str);
 3a6:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_displayCharacter>
	#endif
}

void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
 3aa:	89 91       	ld	r24, Y+
 3ac:	81 11       	cpse	r24, r1
 3ae:	fb cf       	rjmp	.-10     	; 0x3a6 <LCD_displayString+0xe>
	{
	LCD_displayCharacter(Str[i]);
	i++;
	}
	*********************************************************/
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8_t row,uint8_t col)
{
	uint8_t Address;
	
	/* first of all calculate the required address */
	switch(row)
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	31 f0       	breq	.+12     	; 0x3c6 <LCD_goToRowColumn+0x10>
 3ba:	83 30       	cpi	r24, 0x03	; 3
 3bc:	31 f0       	breq	.+12     	; 0x3ca <LCD_goToRowColumn+0x14>
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	29 f4       	brne	.+10     	; 0x3cc <LCD_goToRowColumn+0x16>
		/* only first 2 cases for lcd 2*16 and second 2 for 4*16 */
		case 0:
		Address=col;
		break;
		case 1:
		Address=col+0x40;
 3c2:	60 5c       	subi	r22, 0xC0	; 192
		break;
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <LCD_goToRowColumn+0x16>
		
		case 2:
		Address=col+0x10;
 3c6:	60 5f       	subi	r22, 0xF0	; 240
		break;
 3c8:	01 c0       	rjmp	.+2      	; 0x3cc <LCD_goToRowColumn+0x16>
		case 3:
		Address=col+0x50;
 3ca:	60 5b       	subi	r22, 0xB0	; 176
		Address=col;
	}
	/* to write to a specific address in the LCD
	* we need to apply the corresponding command 0b10000000+Address */
	
	LCD_sendCommand(Address | DDRAM_CURSOR_LOCATION);
 3cc:	86 2f       	mov	r24, r22
 3ce:	80 68       	ori	r24, 0x80	; 128
 3d0:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_sendCommand>
 3d4:	08 95       	ret

000003d6 <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
 3dc:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
 3e0:	ce 01       	movw	r24, r28
 3e2:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	60 97       	sbiw	r28, 0x10	; 16
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 400:	4a e0       	ldi	r20, 0x0A	; 10
 402:	be 01       	movw	r22, r28
 404:	6f 5f       	subi	r22, 0xFF	; 255
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__itoa_ncheck>
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* itoa convert int to char, 10 for decimal */
	LCD_displayString(buff);
 40c:	ce 01       	movw	r24, r28
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
}
 414:	60 96       	adiw	r28, 0x10	; 16
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <LCD_clearScreen>:



void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_sendCommand>
 42c:	08 95       	ret

0000042e <Timer1_Fast_PWM_init>:
/*						servo motors                                                                     */
/************************************************************************/

void Timer1_Fast_PWM_init()
{
	SET_BIT(SERVO_OUT_PORT_DIR,SERVO_OUT_PIN);
 42e:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;		/* Set timer1 initial count to zero */
 430:	1d bc       	out	0x2d, r1	; 45
 432:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;	/* Set TOP count for timer1 in ICR1 register 2499 for 8Mhz */
 434:	83 ec       	ldi	r24, 0xC3	; 195
 436:	99 e0       	ldi	r25, 0x09	; 9
 438:	97 bd       	out	0x27, r25	; 39
 43a:	86 bd       	out	0x26, r24	; 38
	TCCR1A |= (1<<WGM11) ;
 43c:	8f b5       	in	r24, 0x2f	; 47
 43e:	82 60       	ori	r24, 0x02	; 2
 440:	8f bd       	out	0x2f, r24	; 47
	/* Configure timer control register TCCR1A
	* 1. Fast Pwm Mode with the TOP in ICR1 WGM12=01 WGM13=1
	* 2. Prescaler = F_CPU/64
	*/
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11)| (1<<CS10); 
 442:	8e b5       	in	r24, 0x2e	; 46
 444:	8b 61       	ori	r24, 0x1B	; 27
 446:	8e bd       	out	0x2e, r24	; 46
 448:	08 95       	ret

0000044a <Timer1_Fast_PWM_rotate>:
	
}
void Timer1_Fast_PWM_rotate(unsigned short duty_cycle)
{
	TCNT1 = 0;		/* Set timer1 initial count to zero */
 44a:	1d bc       	out	0x2d, r1	; 45
 44c:	1c bc       	out	0x2c, r1	; 44

	OCR1A = duty_cycle; /* Set the compare value */
 44e:	9b bd       	out	0x2b, r25	; 43
 450:	8a bd       	out	0x2a, r24	; 42
	
	TCCR1A |= (1<<COM1A1);
 452:	8f b5       	in	r24, 0x2f	; 47
 454:	80 68       	ori	r24, 0x80	; 128
 456:	8f bd       	out	0x2f, r24	; 47
 458:	08 95       	ret

0000045a <get_temperture>:
#include "ADCFunc.h"



uint8_t get_temperture(){
	ADC_init();
 45a:	0e 94 93 00 	call	0x126	; 0x126 <ADC_init>
	ADC_select_channel(temp_pin);
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 aa 00 	call	0x154	; 0x154 <ADC_select_channel>
	ADC_start_conversion();
 464:	0e 94 63 00 	call	0xc6	; 0xc6 <ADC_start_conversion>
	return (ADC_read()/temp_factor);
 468:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_read>
 46c:	bc 01       	movw	r22, r24
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatunsisf>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	40 e8       	ldi	r20, 0x80	; 128
 47c:	5e e3       	ldi	r21, 0x3E	; 62
 47e:	0e 94 47 05 	call	0xa8e	; 0xa8e <__mulsf3>
 482:	0e 94 b2 04 	call	0x964	; 0x964 <__fixunssfsi>
 486:	86 2f       	mov	r24, r22
}
 488:	08 95       	ret

0000048a <get_LDR>:

//LDR

uint8_t get_LDR()
{
	ADC_init();
 48a:	0e 94 93 00 	call	0x126	; 0x126 <ADC_init>
	ADC_select_channel(LDR_PIN);
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 aa 00 	call	0x154	; 0x154 <ADC_select_channel>
	ADC_start_conversion();
 494:	0e 94 63 00 	call	0xc6	; 0xc6 <ADC_start_conversion>
	return (ADC_read());
 498:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_read>
 49c:	08 95       	ret

0000049e <init_pins>:
#include "pins.h"


void init_pins(){
	//set as out 
	SET_BIT(_outDoorLightDIR,_outDoorLightpin);
 49e:	b8 9a       	sbi	0x17, 0	; 23
	SET_BIT(_outDoorLightPORT,_outDoorLightpin);
 4a0:	c0 9a       	sbi	0x18, 0	; 24
	
	SET_BIT(_poolDIR,_poolpin);
 4a2:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(_poolPORT,_poolpin);
 4a4:	c3 9a       	sbi	0x18, 3	; 24
	
	SET_BIT(_alarmDIR,_alarmpin);
 4a6:	8f 9a       	sbi	0x11, 7	; 17
	SET_BIT(_alarmPORT,_alarmpin);
 4a8:	97 9a       	sbi	0x12, 7	; 18
	
	SET_BIT(_inDoorDIR,_inDoorpin);
 4aa:	8e 9a       	sbi	0x11, 6	; 17
	SET_BIT(_inDoorPORT,_inDoorpin);
 4ac:	96 9a       	sbi	0x12, 6	; 18
	
	SET_BIT(_livingDIR,_livingpin);
 4ae:	8c 9a       	sbi	0x11, 4	; 17
	SET_BIT(_livingPORT,_livingpin);
 4b0:	94 9a       	sbi	0x12, 4	; 18
 4b2:	08 95       	ret

000004b4 <recv_init>:
#include "recv.h"


void recv_init()
{
		CLEAR_BIT(recvDIR,recvpin0);
 4b4:	d2 98       	cbi	0x1a, 2	; 26
		CLEAR_BIT(recvDIR,recvpin1);
 4b6:	d3 98       	cbi	0x1a, 3	; 26
		CLEAR_BIT(recvDIR,recvpin2);
 4b8:	d4 98       	cbi	0x1a, 4	; 26
		CLEAR_BIT(recvDIR,recvpin3);
 4ba:	d5 98       	cbi	0x1a, 5	; 26
 4bc:	08 95       	ret

000004be <recvdata>:
 4be:	2f e7       	ldi	r18, 0x7F	; 127
 4c0:	88 e3       	ldi	r24, 0x38	; 56
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	21 50       	subi	r18, 0x01	; 1
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <recvdata+0x6>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <recvdata+0x10>
 4ce:	00 00       	nop
}

int recvdata()
{	
	_delay_ms(50);
	return ((recvPORT>>2)&0x0f); // 0b00001111
 4d0:	89 b3       	in	r24, 0x19	; 25
 4d2:	86 95       	lsr	r24
 4d4:	86 95       	lsr	r24
 4d6:	8f 70       	andi	r24, 0x0F	; 15
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	08 95       	ret

000004dc <main>:
	uint16_t adc_out;
	
	char key;
	
	// disable jtag protocol
	MCUCSR = (1<<JTD);
 4dc:	80 e8       	ldi	r24, 0x80	; 128
 4de:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
 4e0:	84 bf       	out	0x34, r24	; 52
	
	// set interrupts for INT2
	LCD_init();
 4e2:	0e 94 76 01 	call	0x2ec	; 0x2ec <LCD_init>
	LCD_clearScreen();
 4e6:	0e 94 13 02 	call	0x426	; 0x426 <LCD_clearScreen>
	LCD_displayString("start int2");
 4ea:	80 e6       	ldi	r24, 0x60	; 96
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	84 e3       	ldi	r24, 0x34	; 52
 4f6:	9c e0       	ldi	r25, 0x0C	; 12
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0x1c>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x26>
 502:	00 00       	nop
	_delay_ms(500);
	SET_BIT(GICR,INT2);
 504:	8b b7       	in	r24, 0x3b	; 59
 506:	80 62       	ori	r24, 0x20	; 32
 508:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCSR,ISC2);
 50a:	84 b7       	in	r24, 0x34	; 52
 50c:	80 64       	ori	r24, 0x40	; 64
 50e:	84 bf       	out	0x34, r24	; 52
	LCD_clearScreen();
 510:	0e 94 13 02 	call	0x426	; 0x426 <LCD_clearScreen>
	LCD_displayString("start int0");
 514:	8b e6       	ldi	r24, 0x6B	; 107
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
 51c:	2f ef       	ldi	r18, 0xFF	; 255
 51e:	84 e3       	ldi	r24, 0x34	; 52
 520:	9c e0       	ldi	r25, 0x0C	; 12
 522:	21 50       	subi	r18, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0x46>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0x50>
 52c:	00 00       	nop
	_delay_ms(500);
	//set interrupt for INT0
	SET_BIT(GICR,INT0);
 52e:	8b b7       	in	r24, 0x3b	; 59
 530:	80 64       	ori	r24, 0x40	; 64
 532:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,ISC00);
 534:	85 b7       	in	r24, 0x35	; 53
 536:	81 60       	ori	r24, 0x01	; 1
 538:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC01);
 53a:	85 b7       	in	r24, 0x35	; 53
 53c:	82 60       	ori	r24, 0x02	; 2
 53e:	85 bf       	out	0x35, r24	; 53
	//clear INT0 flag by setting it to 1
	SET_BIT(GIFR,INTF0);
 540:	8a b7       	in	r24, 0x3a	; 58
 542:	80 64       	ori	r24, 0x40	; 64
 544:	8a bf       	out	0x3a, r24	; 58
	sei();
 546:	78 94       	sei
	
	//receive data
	recv_init();
 548:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <recv_init>
	//motor init
	Timer1_Fast_PWM_init();
 54c:	0e 94 17 02 	call	0x42e	; 0x42e <Timer1_Fast_PWM_init>
	// write default password to EEPROM
	EEPROM_WriteNByte(GATE_PASSWORD_ADDRESS,(uint8_t*)default_pass,PASS_LEN);
 550:	44 e0       	ldi	r20, 0x04	; 4
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	66 e7       	ldi	r22, 0x76	; 118
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	80 e1       	ldi	r24, 0x10	; 16
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 cc 00 	call	0x198	; 0x198 <EEPROM_WriteNByte>
 560:	2f ef       	ldi	r18, 0xFF	; 255
 562:	80 e7       	ldi	r24, 0x70	; 112
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	21 50       	subi	r18, 0x01	; 1
 568:	80 40       	sbci	r24, 0x00	; 0
 56a:	90 40       	sbci	r25, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <main+0x8a>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x94>
 570:	00 00       	nop
	
	_delay_ms(100);
	//set pins to out high for off
	init_pins();
 572:	0e 94 4f 02 	call	0x49e	; 0x49e <init_pins>
	
	while (1)
	{
		LCD_clearScreen();
 576:	0e 94 13 02 	call	0x426	; 0x426 <LCD_clearScreen>
		LCD_displayStringRowColumn(1,0,"temp: ");
 57a:	4b e7       	ldi	r20, 0x7B	; 123
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_displayStringRowColumn>
		LCD_intgerToString((int)get_temperture());
 586:	0e 94 2d 02 	call	0x45a	; 0x45a <get_temperture>
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		LCD_displayStringRowColumn(1,8,"OL:");
 590:	42 e8       	ldi	r20, 0x82	; 130
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	68 e0       	ldi	r22, 0x08	; 8
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_displayStringRowColumn>
		x=(int)get_LDR();
 59c:	0e 94 45 02 	call	0x48a	; 0x48a <get_LDR>
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <x+0x1>
 5a6:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <x>
		LCD_intgerToString(x);
 5aa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		if(x>100)
 5ae:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <x>
 5b2:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <x+0x1>
 5b6:	85 36       	cpi	r24, 0x65	; 101
 5b8:	91 05       	cpc	r25, r1
 5ba:	14 f0       	brlt	.+4      	; 0x5c0 <main+0xe4>
		{
			CLEAR_BIT(PORTB,PB0);
 5bc:	c0 98       	cbi	0x18, 0	; 24
 5be:	01 c0       	rjmp	.+2      	; 0x5c2 <main+0xe6>
			}else{
			SET_BIT(PORTB,PB0);
 5c0:	c0 9a       	sbi	0x18, 0	; 24
 5c2:	2f ef       	ldi	r18, 0xFF	; 255
 5c4:	89 e6       	ldi	r24, 0x69	; 105
 5c6:	98 e1       	ldi	r25, 0x18	; 24
 5c8:	21 50       	subi	r18, 0x01	; 1
 5ca:	80 40       	sbci	r24, 0x00	; 0
 5cc:	90 40       	sbci	r25, 0x00	; 0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <main+0xec>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <main+0xf6>
 5d2:	00 00       	nop
 5d4:	d0 cf       	rjmp	.-96     	; 0x576 <main+0x9a>

000005d6 <__vector_3>:

	
} // end main

ISR (INT2_vect)
{
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	2f 93       	push	r18
 5e2:	3f 93       	push	r19
 5e4:	4f 93       	push	r20
 5e6:	5f 93       	push	r21
 5e8:	6f 93       	push	r22
 5ea:	7f 93       	push	r23
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
 5f0:	af 93       	push	r26
 5f2:	bf 93       	push	r27
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	ef 93       	push	r30
 5fa:	ff 93       	push	r31
	LCD_displayStringRowColumn(0,0,"psswrd is:");
 5fc:	46 e8       	ldi	r20, 0x86	; 134
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_displayStringRowColumn>
	psswrd[passItr]=KeyPad_getPressedKey();
 608:	c0 91 3a 01 	lds	r28, 0x013A	; 0x80013a <__data_end>
 60c:	d0 e0       	ldi	r29, 0x00	; 0
 60e:	0e 94 04 01 	call	0x208	; 0x208 <KeyPad_getPressedKey>
 612:	cb 5b       	subi	r28, 0xBB	; 187
 614:	de 4f       	sbci	r29, 0xFE	; 254
 616:	88 83       	st	Y, r24
	psswrd[passItr+1]='\0';
 618:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__data_end>
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	eb 5b       	subi	r30, 0xBB	; 187
 620:	fe 4f       	sbci	r31, 0xFE	; 254
 622:	11 82       	std	Z+1, r1	; 0x01
	LCD_displayStringRowColumn(0,10,psswrd);
 624:	45 e4       	ldi	r20, 0x45	; 69
 626:	51 e0       	ldi	r21, 0x01	; 1
 628:	6a e0       	ldi	r22, 0x0A	; 10
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_displayStringRowColumn>
	passItr++;
 630:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 634:	8f 5f       	subi	r24, 0xFF	; 255

	if ( passItr >= PASS_LEN)
 636:	84 30       	cpi	r24, 0x04	; 4
 638:	18 f4       	brcc	.+6      	; 0x640 <__vector_3+0x6a>
{
	LCD_displayStringRowColumn(0,0,"psswrd is:");
	psswrd[passItr]=KeyPad_getPressedKey();
	psswrd[passItr+1]='\0';
	LCD_displayStringRowColumn(0,10,psswrd);
	passItr++;
 63a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
 63e:	48 c0       	rjmp	.+144    	; 0x6d0 <__vector_3+0xfa>

	if ( passItr >= PASS_LEN)
	{
		passItr=0;
 640:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
 644:	2f ef       	ldi	r18, 0xFF	; 255
 646:	84 e3       	ldi	r24, 0x34	; 52
 648:	9c e0       	ldi	r25, 0x0C	; 12
 64a:	21 50       	subi	r18, 0x01	; 1
 64c:	80 40       	sbci	r24, 0x00	; 0
 64e:	90 40       	sbci	r25, 0x00	; 0
 650:	e1 f7       	brne	.-8      	; 0x64a <__vector_3+0x74>
 652:	00 c0       	rjmp	.+0      	; 0x654 <__vector_3+0x7e>
 654:	00 00       	nop

		_delay_ms(500);
		LCD_clearScreen();
 656:	0e 94 13 02 	call	0x426	; 0x426 <LCD_clearScreen>
		EEPROM_readNByte( GATE_PASSWORD_ADDRESS, (uint8_t *) GATE_PASSWORD, PASS_LEN);
 65a:	44 e0       	ldi	r20, 0x04	; 4
 65c:	50 e0       	ldi	r21, 0x00	; 0
 65e:	6d e3       	ldi	r22, 0x3D	; 61
 660:	71 e0       	ldi	r23, 0x01	; 1
 662:	80 e1       	ldi	r24, 0x10	; 16
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <EEPROM_readNByte>
		if (!strcmp(psswrd,GATE_PASSWORD))
 66a:	6d e3       	ldi	r22, 0x3D	; 61
 66c:	71 e0       	ldi	r23, 0x01	; 1
 66e:	85 e4       	ldi	r24, 0x45	; 69
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <strcmp>
 676:	89 2b       	or	r24, r25
 678:	b1 f4       	brne	.+44     	; 0x6a6 <__vector_3+0xd0>
		{
			LCD_displayString("gate opens now");
 67a:	81 e9       	ldi	r24, 0x91	; 145
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
			main_gate(SERVO_DEG_180);
 682:	82 e3       	ldi	r24, 0x32	; 50
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	0e 94 25 02 	call	0x44a	; 0x44a <Timer1_Fast_PWM_rotate>
 68a:	2f ef       	ldi	r18, 0xFF	; 255
 68c:	81 e1       	ldi	r24, 0x11	; 17
 68e:	9a e7       	ldi	r25, 0x7A	; 122
 690:	21 50       	subi	r18, 0x01	; 1
 692:	80 40       	sbci	r24, 0x00	; 0
 694:	90 40       	sbci	r25, 0x00	; 0
 696:	e1 f7       	brne	.-8      	; 0x690 <__vector_3+0xba>
 698:	00 c0       	rjmp	.+0      	; 0x69a <__vector_3+0xc4>
 69a:	00 00       	nop
			_delay_ms(5000);
			main_gate(SERVO_DEG_0);
 69c:	8e e3       	ldi	r24, 0x3E	; 62
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 25 02 	call	0x44a	; 0x44a <Timer1_Fast_PWM_rotate>
 6a4:	13 c0       	rjmp	.+38     	; 0x6cc <__vector_3+0xf6>

		}
		else
		{
			LCD_displayString("WRONG PSSWRD :(");
 6a6:	80 ea       	ldi	r24, 0xA0	; 160
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
			LCD_displayStringRowColumn(1,3,"try again");
 6ae:	40 eb       	ldi	r20, 0xB0	; 176
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	63 e0       	ldi	r22, 0x03	; 3
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_displayStringRowColumn>
 6ba:	2f ef       	ldi	r18, 0xFF	; 255
 6bc:	89 e6       	ldi	r24, 0x69	; 105
 6be:	98 e1       	ldi	r25, 0x18	; 24
 6c0:	21 50       	subi	r18, 0x01	; 1
 6c2:	80 40       	sbci	r24, 0x00	; 0
 6c4:	90 40       	sbci	r25, 0x00	; 0
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <__vector_3+0xea>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <__vector_3+0xf4>
 6ca:	00 00       	nop
			_delay_ms(1000);
		}
		LCD_clearScreen();
 6cc:	0e 94 13 02 	call	0x426	; 0x426 <LCD_clearScreen>

	}
}
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <__vector_1>:

ISR (INT0_vect){
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	cli();
 718:	f8 94       	cli
	action=recvdata();
 71a:	0e 94 5f 02 	call	0x4be	; 0x4be <recvdata>
 71e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <action+0x1>
 722:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <action>
	LCD_clearScreen();
 726:	0e 94 13 02 	call	0x426	; 0x426 <LCD_clearScreen>
	switch(action)
 72a:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <action>
 72e:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <action+0x1>
 732:	ea 30       	cpi	r30, 0x0A	; 10
 734:	f1 05       	cpc	r31, r1
 736:	08 f0       	brcs	.+2      	; 0x73a <__vector_1+0x44>
 738:	03 c1       	rjmp	.+518    	; 0x940 <__stack+0xe1>
 73a:	e6 5c       	subi	r30, 0xC6	; 198
 73c:	ff 4f       	sbci	r31, 0xFF	; 255
 73e:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__tablejump2__>
	{
		case 0:
		LCD_displayString("open gate");
 742:	8a eb       	ldi	r24, 0xBA	; 186
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
		LCD_goToRowColumn(1,0);
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
		LCD_intgerToString(action);
 752:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <action>
 756:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <action+0x1>
 75a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		main_gate(SERVO_DEG_180);
 75e:	82 e3       	ldi	r24, 0x32	; 50
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	0e 94 25 02 	call	0x44a	; 0x44a <Timer1_Fast_PWM_rotate>
 766:	2f ef       	ldi	r18, 0xFF	; 255
 768:	89 e6       	ldi	r24, 0x69	; 105
 76a:	98 e1       	ldi	r25, 0x18	; 24
 76c:	21 50       	subi	r18, 0x01	; 1
 76e:	80 40       	sbci	r24, 0x00	; 0
 770:	90 40       	sbci	r25, 0x00	; 0
 772:	e1 f7       	brne	.-8      	; 0x76c <__vector_1+0x76>
 774:	00 c0       	rjmp	.+0      	; 0x776 <__vector_1+0x80>
 776:	00 00       	nop
 778:	e3 c0       	rjmp	.+454    	; 0x940 <__stack+0xe1>
		_delay_ms(1000);
		break;
		
		case 1:
		LCD_displayString("close gate");
 77a:	84 ec       	ldi	r24, 0xC4	; 196
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
		LCD_goToRowColumn(1,0);
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
		LCD_intgerToString(action);
 78a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <action>
 78e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <action+0x1>
 792:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		main_gate(SERVO_DEG_0);
 796:	8e e3       	ldi	r24, 0x3E	; 62
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 25 02 	call	0x44a	; 0x44a <Timer1_Fast_PWM_rotate>
 79e:	2f ef       	ldi	r18, 0xFF	; 255
 7a0:	89 e6       	ldi	r24, 0x69	; 105
 7a2:	98 e1       	ldi	r25, 0x18	; 24
 7a4:	21 50       	subi	r18, 0x01	; 1
 7a6:	80 40       	sbci	r24, 0x00	; 0
 7a8:	90 40       	sbci	r25, 0x00	; 0
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <__vector_1+0xae>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <__vector_1+0xb8>
 7ae:	00 00       	nop
 7b0:	c7 c0       	rjmp	.+398    	; 0x940 <__stack+0xe1>
		_delay_ms(1000);
		break;
		
		case 2:
		LCD_displayString("open pool");
 7b2:	8f ec       	ldi	r24, 0xCF	; 207
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
		LCD_goToRowColumn(1,0);
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
		LCD_intgerToString(action);
 7c2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <action>
 7c6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <action+0x1>
 7ca:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		open(_poolPORT,_poolpin);
 7ce:	c3 98       	cbi	0x18, 3	; 24
 7d0:	2f ef       	ldi	r18, 0xFF	; 255
 7d2:	89 e6       	ldi	r24, 0x69	; 105
 7d4:	98 e1       	ldi	r25, 0x18	; 24
 7d6:	21 50       	subi	r18, 0x01	; 1
 7d8:	80 40       	sbci	r24, 0x00	; 0
 7da:	90 40       	sbci	r25, 0x00	; 0
 7dc:	e1 f7       	brne	.-8      	; 0x7d6 <__vector_1+0xe0>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <__vector_1+0xea>
 7e0:	00 00       	nop
 7e2:	ae c0       	rjmp	.+348    	; 0x940 <__stack+0xe1>
		_delay_ms(1000);
		break;
		
		case 3:
		LCD_displayString("close pool");
 7e4:	89 ed       	ldi	r24, 0xD9	; 217
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
		LCD_goToRowColumn(1,0);
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
		LCD_intgerToString(action);
 7f4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <action>
 7f8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <action+0x1>
 7fc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		close(_poolPORT,_poolpin);
 800:	c3 9a       	sbi	0x18, 3	; 24
 802:	2f ef       	ldi	r18, 0xFF	; 255
 804:	89 e6       	ldi	r24, 0x69	; 105
 806:	98 e1       	ldi	r25, 0x18	; 24
 808:	21 50       	subi	r18, 0x01	; 1
 80a:	80 40       	sbci	r24, 0x00	; 0
 80c:	90 40       	sbci	r25, 0x00	; 0
 80e:	e1 f7       	brne	.-8      	; 0x808 <__vector_1+0x112>
 810:	00 c0       	rjmp	.+0      	; 0x812 <__vector_1+0x11c>
 812:	00 00       	nop
 814:	95 c0       	rjmp	.+298    	; 0x940 <__stack+0xe1>
		_delay_ms(1000);
		break;
		
		case 4:
		LCD_displayString("open living light");
 816:	84 ee       	ldi	r24, 0xE4	; 228
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
		LCD_goToRowColumn(1,0);
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
		LCD_intgerToString(action);
 826:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <action>
 82a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <action+0x1>
 82e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		open(_livingPORT,_livingpin);
 832:	94 98       	cbi	0x12, 4	; 18
 834:	2f ef       	ldi	r18, 0xFF	; 255
 836:	89 e6       	ldi	r24, 0x69	; 105
 838:	98 e1       	ldi	r25, 0x18	; 24
 83a:	21 50       	subi	r18, 0x01	; 1
 83c:	80 40       	sbci	r24, 0x00	; 0
 83e:	90 40       	sbci	r25, 0x00	; 0
 840:	e1 f7       	brne	.-8      	; 0x83a <__vector_1+0x144>
 842:	00 c0       	rjmp	.+0      	; 0x844 <__vector_1+0x14e>
 844:	00 00       	nop
 846:	7c c0       	rjmp	.+248    	; 0x940 <__stack+0xe1>
		_delay_ms(1000);
		break;
		
		case 5:
		LCD_displayString("close living light");
 848:	86 ef       	ldi	r24, 0xF6	; 246
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
		LCD_goToRowColumn(1,0);
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
		LCD_intgerToString(action);
 858:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <action>
 85c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <action+0x1>
 860:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		close(_livingPORT,_livingpin);
 864:	94 9a       	sbi	0x12, 4	; 18
 866:	2f ef       	ldi	r18, 0xFF	; 255
 868:	89 e6       	ldi	r24, 0x69	; 105
 86a:	98 e1       	ldi	r25, 0x18	; 24
 86c:	21 50       	subi	r18, 0x01	; 1
 86e:	80 40       	sbci	r24, 0x00	; 0
 870:	90 40       	sbci	r25, 0x00	; 0
 872:	e1 f7       	brne	.-8      	; 0x86c <__stack+0xd>
 874:	00 c0       	rjmp	.+0      	; 0x876 <__stack+0x17>
 876:	00 00       	nop
 878:	63 c0       	rjmp	.+198    	; 0x940 <__stack+0xe1>
		_delay_ms(1000);
		break;
		
		case 6:
		LCD_displayString("open alarm");
 87a:	89 e0       	ldi	r24, 0x09	; 9
 87c:	91 e0       	ldi	r25, 0x01	; 1
 87e:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
		LCD_goToRowColumn(1,0);
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
		LCD_intgerToString(action);
 88a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <action>
 88e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <action+0x1>
 892:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		open(_alarmPORT,_alarmpin);
 896:	97 98       	cbi	0x12, 7	; 18
 898:	2f ef       	ldi	r18, 0xFF	; 255
 89a:	89 e6       	ldi	r24, 0x69	; 105
 89c:	98 e1       	ldi	r25, 0x18	; 24
 89e:	21 50       	subi	r18, 0x01	; 1
 8a0:	80 40       	sbci	r24, 0x00	; 0
 8a2:	90 40       	sbci	r25, 0x00	; 0
 8a4:	e1 f7       	brne	.-8      	; 0x89e <__stack+0x3f>
 8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <__stack+0x49>
 8a8:	00 00       	nop
 8aa:	4a c0       	rjmp	.+148    	; 0x940 <__stack+0xe1>
		_delay_ms(1000);
		break;
		
		case 7:
		LCD_displayString("close alarm");
 8ac:	84 e1       	ldi	r24, 0x14	; 20
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
		LCD_goToRowColumn(1,0);
 8b4:	60 e0       	ldi	r22, 0x00	; 0
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
		LCD_intgerToString(action);
 8bc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <action>
 8c0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <action+0x1>
 8c4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		close(_alarmPORT,_alarmpin);
 8c8:	97 9a       	sbi	0x12, 7	; 18
 8ca:	2f ef       	ldi	r18, 0xFF	; 255
 8cc:	89 e6       	ldi	r24, 0x69	; 105
 8ce:	98 e1       	ldi	r25, 0x18	; 24
 8d0:	21 50       	subi	r18, 0x01	; 1
 8d2:	80 40       	sbci	r24, 0x00	; 0
 8d4:	90 40       	sbci	r25, 0x00	; 0
 8d6:	e1 f7       	brne	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	00 c0       	rjmp	.+0      	; 0x8da <__stack+0x7b>
 8da:	00 00       	nop
 8dc:	31 c0       	rjmp	.+98     	; 0x940 <__stack+0xe1>
		_delay_ms(1000);
		break;
		
		case 8:
		LCD_displayString("open indoor");
 8de:	80 e2       	ldi	r24, 0x20	; 32
 8e0:	91 e0       	ldi	r25, 0x01	; 1
 8e2:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
		LCD_goToRowColumn(1,0);
 8e6:	60 e0       	ldi	r22, 0x00	; 0
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
		LCD_intgerToString(action);
 8ee:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <action>
 8f2:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <action+0x1>
 8f6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		open(_inDoorPORT,_inDoorpin);
 8fa:	96 98       	cbi	0x12, 6	; 18
 8fc:	2f ef       	ldi	r18, 0xFF	; 255
 8fe:	89 e6       	ldi	r24, 0x69	; 105
 900:	98 e1       	ldi	r25, 0x18	; 24
 902:	21 50       	subi	r18, 0x01	; 1
 904:	80 40       	sbci	r24, 0x00	; 0
 906:	90 40       	sbci	r25, 0x00	; 0
 908:	e1 f7       	brne	.-8      	; 0x902 <__stack+0xa3>
 90a:	00 c0       	rjmp	.+0      	; 0x90c <__stack+0xad>
 90c:	00 00       	nop
 90e:	18 c0       	rjmp	.+48     	; 0x940 <__stack+0xe1>
		_delay_ms(1000);
		break;
		
		case 9:
		LCD_displayString("close indoor");
 910:	8c e2       	ldi	r24, 0x2C	; 44
 912:	91 e0       	ldi	r25, 0x01	; 1
 914:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_displayString>
		LCD_goToRowColumn(1,0);
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_goToRowColumn>
		LCD_intgerToString(action);
 920:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <action>
 924:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <action+0x1>
 928:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LCD_intgerToString>
		close(_inDoorPORT,_inDoorpin);
 92c:	96 9a       	sbi	0x12, 6	; 18
 92e:	2f ef       	ldi	r18, 0xFF	; 255
 930:	89 e6       	ldi	r24, 0x69	; 105
 932:	98 e1       	ldi	r25, 0x18	; 24
 934:	21 50       	subi	r18, 0x01	; 1
 936:	80 40       	sbci	r24, 0x00	; 0
 938:	90 40       	sbci	r25, 0x00	; 0
 93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0xd5>
 93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0xdf>
 93e:	00 00       	nop
		
		
		
		
	}
	sei();
 940:	78 94       	sei
 942:	ff 91       	pop	r31
 944:	ef 91       	pop	r30
 946:	bf 91       	pop	r27
 948:	af 91       	pop	r26
 94a:	9f 91       	pop	r25
 94c:	8f 91       	pop	r24
 94e:	7f 91       	pop	r23
 950:	6f 91       	pop	r22
 952:	5f 91       	pop	r21
 954:	4f 91       	pop	r20
 956:	3f 91       	pop	r19
 958:	2f 91       	pop	r18
 95a:	0f 90       	pop	r0
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	0f 90       	pop	r0
 960:	1f 90       	pop	r1
 962:	18 95       	reti

00000964 <__fixunssfsi>:
 964:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_splitA>
 968:	88 f0       	brcs	.+34     	; 0x98c <__fixunssfsi+0x28>
 96a:	9f 57       	subi	r25, 0x7F	; 127
 96c:	98 f0       	brcs	.+38     	; 0x994 <__fixunssfsi+0x30>
 96e:	b9 2f       	mov	r27, r25
 970:	99 27       	eor	r25, r25
 972:	b7 51       	subi	r27, 0x17	; 23
 974:	b0 f0       	brcs	.+44     	; 0x9a2 <__fixunssfsi+0x3e>
 976:	e1 f0       	breq	.+56     	; 0x9b0 <__fixunssfsi+0x4c>
 978:	66 0f       	add	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	1a f0       	brmi	.+6      	; 0x988 <__fixunssfsi+0x24>
 982:	ba 95       	dec	r27
 984:	c9 f7       	brne	.-14     	; 0x978 <__fixunssfsi+0x14>
 986:	14 c0       	rjmp	.+40     	; 0x9b0 <__fixunssfsi+0x4c>
 988:	b1 30       	cpi	r27, 0x01	; 1
 98a:	91 f0       	breq	.+36     	; 0x9b0 <__fixunssfsi+0x4c>
 98c:	0e 94 40 05 	call	0xa80	; 0xa80 <__fp_zero>
 990:	b1 e0       	ldi	r27, 0x01	; 1
 992:	08 95       	ret
 994:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__fp_zero>
 998:	67 2f       	mov	r22, r23
 99a:	78 2f       	mov	r23, r24
 99c:	88 27       	eor	r24, r24
 99e:	b8 5f       	subi	r27, 0xF8	; 248
 9a0:	39 f0       	breq	.+14     	; 0x9b0 <__fixunssfsi+0x4c>
 9a2:	b9 3f       	cpi	r27, 0xF9	; 249
 9a4:	cc f3       	brlt	.-14     	; 0x998 <__fixunssfsi+0x34>
 9a6:	86 95       	lsr	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	b3 95       	inc	r27
 9ae:	d9 f7       	brne	.-10     	; 0x9a6 <__fixunssfsi+0x42>
 9b0:	3e f4       	brtc	.+14     	; 0x9c0 <__fixunssfsi+0x5c>
 9b2:	90 95       	com	r25
 9b4:	80 95       	com	r24
 9b6:	70 95       	com	r23
 9b8:	61 95       	neg	r22
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255
 9bc:	8f 4f       	sbci	r24, 0xFF	; 255
 9be:	9f 4f       	sbci	r25, 0xFF	; 255
 9c0:	08 95       	ret

000009c2 <__floatunsisf>:
 9c2:	e8 94       	clt
 9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <__floatsisf+0x12>

000009c6 <__floatsisf>:
 9c6:	97 fb       	bst	r25, 7
 9c8:	3e f4       	brtc	.+14     	; 0x9d8 <__floatsisf+0x12>
 9ca:	90 95       	com	r25
 9cc:	80 95       	com	r24
 9ce:	70 95       	com	r23
 9d0:	61 95       	neg	r22
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	99 23       	and	r25, r25
 9da:	a9 f0       	breq	.+42     	; 0xa06 <__floatsisf+0x40>
 9dc:	f9 2f       	mov	r31, r25
 9de:	96 e9       	ldi	r25, 0x96	; 150
 9e0:	bb 27       	eor	r27, r27
 9e2:	93 95       	inc	r25
 9e4:	f6 95       	lsr	r31
 9e6:	87 95       	ror	r24
 9e8:	77 95       	ror	r23
 9ea:	67 95       	ror	r22
 9ec:	b7 95       	ror	r27
 9ee:	f1 11       	cpse	r31, r1
 9f0:	f8 cf       	rjmp	.-16     	; 0x9e2 <__floatsisf+0x1c>
 9f2:	fa f4       	brpl	.+62     	; 0xa32 <__floatsisf+0x6c>
 9f4:	bb 0f       	add	r27, r27
 9f6:	11 f4       	brne	.+4      	; 0x9fc <__floatsisf+0x36>
 9f8:	60 ff       	sbrs	r22, 0
 9fa:	1b c0       	rjmp	.+54     	; 0xa32 <__floatsisf+0x6c>
 9fc:	6f 5f       	subi	r22, 0xFF	; 255
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	16 c0       	rjmp	.+44     	; 0xa32 <__floatsisf+0x6c>
 a06:	88 23       	and	r24, r24
 a08:	11 f0       	breq	.+4      	; 0xa0e <__floatsisf+0x48>
 a0a:	96 e9       	ldi	r25, 0x96	; 150
 a0c:	11 c0       	rjmp	.+34     	; 0xa30 <__floatsisf+0x6a>
 a0e:	77 23       	and	r23, r23
 a10:	21 f0       	breq	.+8      	; 0xa1a <__floatsisf+0x54>
 a12:	9e e8       	ldi	r25, 0x8E	; 142
 a14:	87 2f       	mov	r24, r23
 a16:	76 2f       	mov	r23, r22
 a18:	05 c0       	rjmp	.+10     	; 0xa24 <__floatsisf+0x5e>
 a1a:	66 23       	and	r22, r22
 a1c:	71 f0       	breq	.+28     	; 0xa3a <__floatsisf+0x74>
 a1e:	96 e8       	ldi	r25, 0x86	; 134
 a20:	86 2f       	mov	r24, r22
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	2a f0       	brmi	.+10     	; 0xa32 <__floatsisf+0x6c>
 a28:	9a 95       	dec	r25
 a2a:	66 0f       	add	r22, r22
 a2c:	77 1f       	adc	r23, r23
 a2e:	88 1f       	adc	r24, r24
 a30:	da f7       	brpl	.-10     	; 0xa28 <__floatsisf+0x62>
 a32:	88 0f       	add	r24, r24
 a34:	96 95       	lsr	r25
 a36:	87 95       	ror	r24
 a38:	97 f9       	bld	r25, 7
 a3a:	08 95       	ret

00000a3c <__fp_split3>:
 a3c:	57 fd       	sbrc	r21, 7
 a3e:	90 58       	subi	r25, 0x80	; 128
 a40:	44 0f       	add	r20, r20
 a42:	55 1f       	adc	r21, r21
 a44:	59 f0       	breq	.+22     	; 0xa5c <__fp_splitA+0x10>
 a46:	5f 3f       	cpi	r21, 0xFF	; 255
 a48:	71 f0       	breq	.+28     	; 0xa66 <__fp_splitA+0x1a>
 a4a:	47 95       	ror	r20

00000a4c <__fp_splitA>:
 a4c:	88 0f       	add	r24, r24
 a4e:	97 fb       	bst	r25, 7
 a50:	99 1f       	adc	r25, r25
 a52:	61 f0       	breq	.+24     	; 0xa6c <__fp_splitA+0x20>
 a54:	9f 3f       	cpi	r25, 0xFF	; 255
 a56:	79 f0       	breq	.+30     	; 0xa76 <__fp_splitA+0x2a>
 a58:	87 95       	ror	r24
 a5a:	08 95       	ret
 a5c:	12 16       	cp	r1, r18
 a5e:	13 06       	cpc	r1, r19
 a60:	14 06       	cpc	r1, r20
 a62:	55 1f       	adc	r21, r21
 a64:	f2 cf       	rjmp	.-28     	; 0xa4a <__fp_split3+0xe>
 a66:	46 95       	lsr	r20
 a68:	f1 df       	rcall	.-30     	; 0xa4c <__fp_splitA>
 a6a:	08 c0       	rjmp	.+16     	; 0xa7c <__fp_splitA+0x30>
 a6c:	16 16       	cp	r1, r22
 a6e:	17 06       	cpc	r1, r23
 a70:	18 06       	cpc	r1, r24
 a72:	99 1f       	adc	r25, r25
 a74:	f1 cf       	rjmp	.-30     	; 0xa58 <__fp_splitA+0xc>
 a76:	86 95       	lsr	r24
 a78:	71 05       	cpc	r23, r1
 a7a:	61 05       	cpc	r22, r1
 a7c:	08 94       	sec
 a7e:	08 95       	ret

00000a80 <__fp_zero>:
 a80:	e8 94       	clt

00000a82 <__fp_szero>:
 a82:	bb 27       	eor	r27, r27
 a84:	66 27       	eor	r22, r22
 a86:	77 27       	eor	r23, r23
 a88:	cb 01       	movw	r24, r22
 a8a:	97 f9       	bld	r25, 7
 a8c:	08 95       	ret

00000a8e <__mulsf3>:
 a8e:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3x>
 a92:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__fp_round>
 a96:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_pscA>
 a9a:	38 f0       	brcs	.+14     	; 0xaaa <__mulsf3+0x1c>
 a9c:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_pscB>
 aa0:	20 f0       	brcs	.+8      	; 0xaaa <__mulsf3+0x1c>
 aa2:	95 23       	and	r25, r21
 aa4:	11 f0       	breq	.+4      	; 0xaaa <__mulsf3+0x1c>
 aa6:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_inf>
 aaa:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_nan>
 aae:	11 24       	eor	r1, r1
 ab0:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_szero>

00000ab4 <__mulsf3x>:
 ab4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__fp_split3>
 ab8:	70 f3       	brcs	.-36     	; 0xa96 <__mulsf3+0x8>

00000aba <__mulsf3_pse>:
 aba:	95 9f       	mul	r25, r21
 abc:	c1 f3       	breq	.-16     	; 0xaae <__mulsf3+0x20>
 abe:	95 0f       	add	r25, r21
 ac0:	50 e0       	ldi	r21, 0x00	; 0
 ac2:	55 1f       	adc	r21, r21
 ac4:	62 9f       	mul	r22, r18
 ac6:	f0 01       	movw	r30, r0
 ac8:	72 9f       	mul	r23, r18
 aca:	bb 27       	eor	r27, r27
 acc:	f0 0d       	add	r31, r0
 ace:	b1 1d       	adc	r27, r1
 ad0:	63 9f       	mul	r22, r19
 ad2:	aa 27       	eor	r26, r26
 ad4:	f0 0d       	add	r31, r0
 ad6:	b1 1d       	adc	r27, r1
 ad8:	aa 1f       	adc	r26, r26
 ada:	64 9f       	mul	r22, r20
 adc:	66 27       	eor	r22, r22
 ade:	b0 0d       	add	r27, r0
 ae0:	a1 1d       	adc	r26, r1
 ae2:	66 1f       	adc	r22, r22
 ae4:	82 9f       	mul	r24, r18
 ae6:	22 27       	eor	r18, r18
 ae8:	b0 0d       	add	r27, r0
 aea:	a1 1d       	adc	r26, r1
 aec:	62 1f       	adc	r22, r18
 aee:	73 9f       	mul	r23, r19
 af0:	b0 0d       	add	r27, r0
 af2:	a1 1d       	adc	r26, r1
 af4:	62 1f       	adc	r22, r18
 af6:	83 9f       	mul	r24, r19
 af8:	a0 0d       	add	r26, r0
 afa:	61 1d       	adc	r22, r1
 afc:	22 1f       	adc	r18, r18
 afe:	74 9f       	mul	r23, r20
 b00:	33 27       	eor	r19, r19
 b02:	a0 0d       	add	r26, r0
 b04:	61 1d       	adc	r22, r1
 b06:	23 1f       	adc	r18, r19
 b08:	84 9f       	mul	r24, r20
 b0a:	60 0d       	add	r22, r0
 b0c:	21 1d       	adc	r18, r1
 b0e:	82 2f       	mov	r24, r18
 b10:	76 2f       	mov	r23, r22
 b12:	6a 2f       	mov	r22, r26
 b14:	11 24       	eor	r1, r1
 b16:	9f 57       	subi	r25, 0x7F	; 127
 b18:	50 40       	sbci	r21, 0x00	; 0
 b1a:	9a f0       	brmi	.+38     	; 0xb42 <__mulsf3_pse+0x88>
 b1c:	f1 f0       	breq	.+60     	; 0xb5a <__mulsf3_pse+0xa0>
 b1e:	88 23       	and	r24, r24
 b20:	4a f0       	brmi	.+18     	; 0xb34 <__mulsf3_pse+0x7a>
 b22:	ee 0f       	add	r30, r30
 b24:	ff 1f       	adc	r31, r31
 b26:	bb 1f       	adc	r27, r27
 b28:	66 1f       	adc	r22, r22
 b2a:	77 1f       	adc	r23, r23
 b2c:	88 1f       	adc	r24, r24
 b2e:	91 50       	subi	r25, 0x01	; 1
 b30:	50 40       	sbci	r21, 0x00	; 0
 b32:	a9 f7       	brne	.-22     	; 0xb1e <__mulsf3_pse+0x64>
 b34:	9e 3f       	cpi	r25, 0xFE	; 254
 b36:	51 05       	cpc	r21, r1
 b38:	80 f0       	brcs	.+32     	; 0xb5a <__mulsf3_pse+0xa0>
 b3a:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_inf>
 b3e:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_szero>
 b42:	5f 3f       	cpi	r21, 0xFF	; 255
 b44:	e4 f3       	brlt	.-8      	; 0xb3e <__mulsf3_pse+0x84>
 b46:	98 3e       	cpi	r25, 0xE8	; 232
 b48:	d4 f3       	brlt	.-12     	; 0xb3e <__mulsf3_pse+0x84>
 b4a:	86 95       	lsr	r24
 b4c:	77 95       	ror	r23
 b4e:	67 95       	ror	r22
 b50:	b7 95       	ror	r27
 b52:	f7 95       	ror	r31
 b54:	e7 95       	ror	r30
 b56:	9f 5f       	subi	r25, 0xFF	; 255
 b58:	c1 f7       	brne	.-16     	; 0xb4a <__mulsf3_pse+0x90>
 b5a:	fe 2b       	or	r31, r30
 b5c:	88 0f       	add	r24, r24
 b5e:	91 1d       	adc	r25, r1
 b60:	96 95       	lsr	r25
 b62:	87 95       	ror	r24
 b64:	97 f9       	bld	r25, 7
 b66:	08 95       	ret

00000b68 <__fp_inf>:
 b68:	97 f9       	bld	r25, 7
 b6a:	9f 67       	ori	r25, 0x7F	; 127
 b6c:	80 e8       	ldi	r24, 0x80	; 128
 b6e:	70 e0       	ldi	r23, 0x00	; 0
 b70:	60 e0       	ldi	r22, 0x00	; 0
 b72:	08 95       	ret

00000b74 <__fp_nan>:
 b74:	9f ef       	ldi	r25, 0xFF	; 255
 b76:	80 ec       	ldi	r24, 0xC0	; 192
 b78:	08 95       	ret

00000b7a <__fp_pscA>:
 b7a:	00 24       	eor	r0, r0
 b7c:	0a 94       	dec	r0
 b7e:	16 16       	cp	r1, r22
 b80:	17 06       	cpc	r1, r23
 b82:	18 06       	cpc	r1, r24
 b84:	09 06       	cpc	r0, r25
 b86:	08 95       	ret

00000b88 <__fp_pscB>:
 b88:	00 24       	eor	r0, r0
 b8a:	0a 94       	dec	r0
 b8c:	12 16       	cp	r1, r18
 b8e:	13 06       	cpc	r1, r19
 b90:	14 06       	cpc	r1, r20
 b92:	05 06       	cpc	r0, r21
 b94:	08 95       	ret

00000b96 <__fp_round>:
 b96:	09 2e       	mov	r0, r25
 b98:	03 94       	inc	r0
 b9a:	00 0c       	add	r0, r0
 b9c:	11 f4       	brne	.+4      	; 0xba2 <__fp_round+0xc>
 b9e:	88 23       	and	r24, r24
 ba0:	52 f0       	brmi	.+20     	; 0xbb6 <__fp_round+0x20>
 ba2:	bb 0f       	add	r27, r27
 ba4:	40 f4       	brcc	.+16     	; 0xbb6 <__fp_round+0x20>
 ba6:	bf 2b       	or	r27, r31
 ba8:	11 f4       	brne	.+4      	; 0xbae <__fp_round+0x18>
 baa:	60 ff       	sbrs	r22, 0
 bac:	04 c0       	rjmp	.+8      	; 0xbb6 <__fp_round+0x20>
 bae:	6f 5f       	subi	r22, 0xFF	; 255
 bb0:	7f 4f       	sbci	r23, 0xFF	; 255
 bb2:	8f 4f       	sbci	r24, 0xFF	; 255
 bb4:	9f 4f       	sbci	r25, 0xFF	; 255
 bb6:	08 95       	ret

00000bb8 <__tablejump2__>:
 bb8:	ee 0f       	add	r30, r30
 bba:	ff 1f       	adc	r31, r31
 bbc:	05 90       	lpm	r0, Z+
 bbe:	f4 91       	lpm	r31, Z
 bc0:	e0 2d       	mov	r30, r0
 bc2:	09 94       	ijmp

00000bc4 <strcmp>:
 bc4:	fb 01       	movw	r30, r22
 bc6:	dc 01       	movw	r26, r24
 bc8:	8d 91       	ld	r24, X+
 bca:	01 90       	ld	r0, Z+
 bcc:	80 19       	sub	r24, r0
 bce:	01 10       	cpse	r0, r1
 bd0:	d9 f3       	breq	.-10     	; 0xbc8 <strcmp+0x4>
 bd2:	99 0b       	sbc	r25, r25
 bd4:	08 95       	ret

00000bd6 <__itoa_ncheck>:
 bd6:	bb 27       	eor	r27, r27
 bd8:	4a 30       	cpi	r20, 0x0A	; 10
 bda:	31 f4       	brne	.+12     	; 0xbe8 <__itoa_ncheck+0x12>
 bdc:	99 23       	and	r25, r25
 bde:	22 f4       	brpl	.+8      	; 0xbe8 <__itoa_ncheck+0x12>
 be0:	bd e2       	ldi	r27, 0x2D	; 45
 be2:	90 95       	com	r25
 be4:	81 95       	neg	r24
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__utoa_common>

00000bec <__utoa_ncheck>:
 bec:	bb 27       	eor	r27, r27

00000bee <__utoa_common>:
 bee:	fb 01       	movw	r30, r22
 bf0:	55 27       	eor	r21, r21
 bf2:	aa 27       	eor	r26, r26
 bf4:	88 0f       	add	r24, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	aa 1f       	adc	r26, r26
 bfa:	a4 17       	cp	r26, r20
 bfc:	10 f0       	brcs	.+4      	; 0xc02 <__utoa_common+0x14>
 bfe:	a4 1b       	sub	r26, r20
 c00:	83 95       	inc	r24
 c02:	50 51       	subi	r21, 0x10	; 16
 c04:	b9 f7       	brne	.-18     	; 0xbf4 <__utoa_common+0x6>
 c06:	a0 5d       	subi	r26, 0xD0	; 208
 c08:	aa 33       	cpi	r26, 0x3A	; 58
 c0a:	08 f0       	brcs	.+2      	; 0xc0e <__utoa_common+0x20>
 c0c:	a9 5d       	subi	r26, 0xD9	; 217
 c0e:	a1 93       	st	Z+, r26
 c10:	00 97       	sbiw	r24, 0x00	; 0
 c12:	79 f7       	brne	.-34     	; 0xbf2 <__utoa_common+0x4>
 c14:	b1 11       	cpse	r27, r1
 c16:	b1 93       	st	Z+, r27
 c18:	11 92       	st	Z+, r1
 c1a:	cb 01       	movw	r24, r22
 c1c:	0c 94 10 06 	jmp	0xc20	; 0xc20 <strrev>

00000c20 <strrev>:
 c20:	dc 01       	movw	r26, r24
 c22:	fc 01       	movw	r30, r24
 c24:	67 2f       	mov	r22, r23
 c26:	71 91       	ld	r23, Z+
 c28:	77 23       	and	r23, r23
 c2a:	e1 f7       	brne	.-8      	; 0xc24 <strrev+0x4>
 c2c:	32 97       	sbiw	r30, 0x02	; 2
 c2e:	04 c0       	rjmp	.+8      	; 0xc38 <strrev+0x18>
 c30:	7c 91       	ld	r23, X
 c32:	6d 93       	st	X+, r22
 c34:	70 83       	st	Z, r23
 c36:	62 91       	ld	r22, -Z
 c38:	ae 17       	cp	r26, r30
 c3a:	bf 07       	cpc	r27, r31
 c3c:	c8 f3       	brcs	.-14     	; 0xc30 <strrev+0x10>
 c3e:	08 95       	ret

00000c40 <_exit>:
 c40:	f8 94       	cli

00000c42 <__stop_program>:
 c42:	ff cf       	rjmp	.-2      	; 0xc42 <__stop_program>
