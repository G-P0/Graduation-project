
workbeanch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000008f8  0000098c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000a2  008000a2  000009ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000191a  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c41  00000000  00000000  000024ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e68  00000000  00000000  0000312f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00003f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000680  00000000  00000000  000042d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec1  00000000  00000000  00004950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005811  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	2a 01       	movw	r4, r20
  56:	0c 01       	movw	r0, r24
  58:	0e 01       	movw	r0, r28
  5a:	10 01       	movw	r2, r0
  5c:	12 01       	movw	r2, r4
  5e:	14 01       	movw	r2, r8
  60:	16 01       	movw	r2, r12
  62:	18 01       	movw	r2, r16
  64:	1a 01       	movw	r2, r20
  66:	1c 01       	movw	r2, r24
  68:	1e 01       	movw	r2, r28
  6a:	20 01       	movw	r4, r0
  6c:	22 01       	movw	r4, r4
  6e:	24 01       	movw	r4, r8
  70:	26 01       	movw	r4, r12
  72:	28 01       	movw	r4, r16

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e8 ef       	ldi	r30, 0xF8	; 248
  88:	f8 e0       	ldi	r31, 0x08	; 8
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 3a       	cpi	r26, 0xA2	; 162
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a2 ea       	ldi	r26, 0xA2	; 162
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a0 3b       	cpi	r26, 0xB0	; 176
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 3b 02 	call	0x476	; 0x476 <main>
  aa:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <ADC_start_conversion>:
	#endif
	
}

void ADC_start_conversion(){
	SET_BIT (ADCSRA,ADEN);										// enable ADC
  b2:	37 9a       	sbi	0x06, 7	; 6
	SET_BIT(ADCSRA,ADSC);										//start conversion
  b4:	36 9a       	sbi	0x06, 6	; 6
  b6:	08 95       	ret

000000b8 <ADC_set_prescaler>:
}

void ADC_set_prescaler(uint8_t prescaler){
	ADCSRA &=~(0x07);									// reset  ADPS0-2 pins
  b8:	96 b1       	in	r25, 0x06	; 6
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	96 b9       	out	0x06, r25	; 6
	switch(prescaler)
  be:	80 31       	cpi	r24, 0x10	; 16
  c0:	b9 f0       	breq	.+46     	; 0xf0 <ADC_set_prescaler+0x38>
  c2:	38 f4       	brcc	.+14     	; 0xd2 <ADC_set_prescaler+0x1a>
  c4:	84 30       	cpi	r24, 0x04	; 4
  c6:	71 f0       	breq	.+28     	; 0xe4 <ADC_set_prescaler+0x2c>
  c8:	88 30       	cpi	r24, 0x08	; 8
  ca:	71 f0       	breq	.+28     	; 0xe8 <ADC_set_prescaler+0x30>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	f1 f4       	brne	.+60     	; 0x10c <ADC_set_prescaler+0x54>
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <ADC_set_prescaler+0x28>
  d2:	80 34       	cpi	r24, 0x40	; 64
  d4:	99 f0       	breq	.+38     	; 0xfc <ADC_set_prescaler+0x44>
  d6:	80 38       	cpi	r24, 0x80	; 128
  d8:	a9 f0       	breq	.+42     	; 0x104 <ADC_set_prescaler+0x4c>
  da:	80 32       	cpi	r24, 0x20	; 32
  dc:	b9 f4       	brne	.+46     	; 0x10c <ADC_set_prescaler+0x54>
  de:	0a c0       	rjmp	.+20     	; 0xf4 <ADC_set_prescaler+0x3c>
	{
		case 2:
		ADCSRA |= (0x01);
  e0:	30 9a       	sbi	0x06, 0	; 6
		break;
  e2:	08 95       	ret
		case 4:
		ADCSRA |= (0x02);
  e4:	31 9a       	sbi	0x06, 1	; 6
		break;
  e6:	08 95       	ret
		case 8:
		ADCSRA |= (0x03);
  e8:	86 b1       	in	r24, 0x06	; 6
  ea:	83 60       	ori	r24, 0x03	; 3
  ec:	86 b9       	out	0x06, r24	; 6
		break;
  ee:	08 95       	ret
		case 16:
		ADCSRA |= (0x04);
  f0:	32 9a       	sbi	0x06, 2	; 6
		break;
  f2:	08 95       	ret
		case 32:
		ADCSRA |= (0x05);
  f4:	86 b1       	in	r24, 0x06	; 6
  f6:	85 60       	ori	r24, 0x05	; 5
  f8:	86 b9       	out	0x06, r24	; 6
		break;
  fa:	08 95       	ret
		case 64:
		ADCSRA |= (0x06);
  fc:	86 b1       	in	r24, 0x06	; 6
  fe:	86 60       	ori	r24, 0x06	; 6
 100:	86 b9       	out	0x06, r24	; 6
		break;
 102:	08 95       	ret
		case 128:
		ADCSRA |= (0x07);
 104:	86 b1       	in	r24, 0x06	; 6
 106:	87 60       	ori	r24, 0x07	; 7
 108:	86 b9       	out	0x06, r24	; 6
		break;
 10a:	08 95       	ret
		default:
		ADCSRA |= (0x00);
 10c:	86 b1       	in	r24, 0x06	; 6
 10e:	86 b9       	out	0x06, r24	; 6
 110:	08 95       	ret

00000112 <ADC_init>:
/************************************************************************/
/*                                                                      */
/************************************************************************/
void ADC_init(){
	
	CLEAR_BIT (ADC_port_DD,ADC_defualt_channel);					//set channel pin to be input
 112:	d0 98       	cbi	0x1a, 0	; 26
	ADMUX &=~(0x1f);
 114:	87 b1       	in	r24, 0x07	; 7
 116:	80 7e       	andi	r24, 0xE0	; 224
 118:	87 b9       	out	0x07, r24	; 7
	ADMUX |= ADC_defualt_channel & 0xFF;						// select channel using MUX0-4 bits
 11a:	87 b1       	in	r24, 0x07	; 7
 11c:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (ADC_ref << 6);									// set ref at pin 7 6 of ADMUX
 11e:	87 b1       	in	r24, 0x07	; 7
 120:	80 6c       	ori	r24, 0xC0	; 192
 122:	87 b9       	out	0x07, r24	; 7
	ADC_set_prescaler(ADC_prescaler);							// set prescaler
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_set_prescaler>
	#if (1 == ADC_data_leftAjust)
	ADMUX |=(ADC_data_leftAjust<<ADLAR)		;					// adjust data for left
 12a:	3d 9a       	sbi	0x07, 5	; 7
 12c:	08 95       	ret

0000012e <ADC_read>:
}

uint16_t ADC_read()
{
	uint16_t result;
	while(BIT_IS_SET(ADCSRA,ADSC));
 12e:	36 99       	sbic	0x06, 6	; 6
 130:	fe cf       	rjmp	.-4      	; 0x12e <ADC_read>
	#if (1 == ADC_data_leftAjust)
	result= ((0xFFFF & ADCH)<<2);
 132:	85 b1       	in	r24, 0x05	; 5
	return result;
 134:	90 e0       	ldi	r25, 0x00	; 0
	#else
	result =ADCL;
	result |=(0xffff&ADCH)<<8;
	return result;
	#endif
}
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	08 95       	ret

00000140 <ADC_select_channel>:

void ADC_select_channel(uint8_t channel){
			CLEAR_BIT (ADC_port_DD,channel) ;
 140:	9a b3       	in	r25, 0x1a	; 26
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	08 2e       	mov	r0, r24
 148:	02 c0       	rjmp	.+4      	; 0x14e <ADC_select_channel+0xe>
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <ADC_select_channel+0xa>
 152:	20 95       	com	r18
 154:	29 23       	and	r18, r25
 156:	2a bb       	out	0x1a, r18	; 26
			ADMUX &= ~(0x1f) ;
 158:	97 b1       	in	r25, 0x07	; 7
 15a:	90 7e       	andi	r25, 0xE0	; 224
 15c:	97 b9       	out	0x07, r25	; 7
			ADMUX |= ( 0xff & channel );
 15e:	97 b1       	in	r25, 0x07	; 7
 160:	89 2b       	or	r24, r25
 162:	87 b9       	out	0x07, r24	; 7
 164:	08 95       	ret

00000166 <EEPROM_write>:

/* EEPROM write Byte into EEPROM at specific address */
void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(!BIT_IS_CLEAR(EECR,EEWE));
 166:	e1 99       	sbic	0x1c, 1	; 28
 168:	fe cf       	rjmp	.-4      	; 0x166 <EEPROM_write>
	;
	/* Set up address and data registers */
	EEAR = uiAddress;
 16a:	9f bb       	out	0x1f, r25	; 31
 16c:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 16e:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	SET_BIT(EECR,EEMWE);
 170:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	SET_BIT(EECR,EEWE);
 172:	e1 9a       	sbi	0x1c, 1	; 28
 174:	08 95       	ret

00000176 <EEPROM_read>:

/* EEPROM read Byte from EEPROM at specific address */
uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(!BIT_IS_CLEAR(EECR,EEWE));
 176:	e1 99       	sbic	0x1c, 1	; 28
 178:	fe cf       	rjmp	.-4      	; 0x176 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
 17a:	9f bb       	out	0x1f, r25	; 31
 17c:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	SET_BIT(EECR,EERE);
 17e:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
 180:	8d b3       	in	r24, 0x1d	; 29
}
 182:	08 95       	ret

00000184 <EEPROM_WriteNByte>:


/* EEPROM write N number of Bytes into EEPROM at specific address */
void EEPROM_WriteNByte(uint16_t uiAddress, uint8_t *ucData,uint16_t uiNumberOfBytes)
{
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	8c 01       	movw	r16, r24
 192:	7b 01       	movw	r14, r22
 194:	ea 01       	movw	r28, r20
	
	while(uiNumberOfBytes!=0){
 196:	20 97       	sbiw	r28, 0x00	; 0
 198:	51 f0       	breq	.+20     	; 0x1ae <EEPROM_WriteNByte+0x2a>
		EEPROM_write(uiAddress,*ucData);
 19a:	f7 01       	movw	r30, r14
 19c:	61 91       	ld	r22, Z+
 19e:	7f 01       	movw	r14, r30
 1a0:	c8 01       	movw	r24, r16
 1a2:	0e 94 b3 00 	call	0x166	; 0x166 <EEPROM_write>
		ucData++;
		uiAddress++;
 1a6:	0f 5f       	subi	r16, 0xFF	; 255
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
		uiNumberOfBytes--;
 1aa:	21 97       	sbiw	r28, 0x01	; 1

/* EEPROM write N number of Bytes into EEPROM at specific address */
void EEPROM_WriteNByte(uint16_t uiAddress, uint8_t *ucData,uint16_t uiNumberOfBytes)
{
	
	while(uiNumberOfBytes!=0){
 1ac:	b1 f7       	brne	.-20     	; 0x19a <EEPROM_WriteNByte+0x16>
		EEPROM_write(uiAddress,*ucData);
		ucData++;
		uiAddress++;
		uiNumberOfBytes--;
	}
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	08 95       	ret

000001bc <EEPROM_readNByte>:
/* EEPROM read N number of Bytes from EEPROM at specific address and copy it into ucDataRam pointer */

void EEPROM_readNByte(uint16_t uiAddress,uint8_t *ucDataRam,uint16_t uiNumberOfBytes){
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	8c 01       	movw	r16, r24
 1ca:	7b 01       	movw	r14, r22
 1cc:	ea 01       	movw	r28, r20
	
	while (uiNumberOfBytes!=0){
 1ce:	20 97       	sbiw	r28, 0x00	; 0
 1d0:	51 f0       	breq	.+20     	; 0x1e6 <EEPROM_readNByte+0x2a>
		*ucDataRam=EEPROM_read(uiAddress);
 1d2:	c8 01       	movw	r24, r16
 1d4:	0e 94 bb 00 	call	0x176	; 0x176 <EEPROM_read>
 1d8:	f7 01       	movw	r30, r14
 1da:	81 93       	st	Z+, r24
 1dc:	7f 01       	movw	r14, r30
		uiAddress++;
 1de:	0f 5f       	subi	r16, 0xFF	; 255
 1e0:	1f 4f       	sbci	r17, 0xFF	; 255
		ucDataRam++;
		uiNumberOfBytes--;
 1e2:	21 97       	sbiw	r28, 0x01	; 1
}
/* EEPROM read N number of Bytes from EEPROM at specific address and copy it into ucDataRam pointer */

void EEPROM_readNByte(uint16_t uiAddress,uint8_t *ucDataRam,uint16_t uiNumberOfBytes){
	
	while (uiNumberOfBytes!=0){
 1e4:	b1 f7       	brne	.-20     	; 0x1d2 <EEPROM_readNByte+0x16>
		*ucDataRam=EEPROM_read(uiAddress);
		uiAddress++;
		ucDataRam++;
		uiNumberOfBytes--;
	}
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	08 95       	ret

000001f4 <KeyPad_getPressedKey>:
		}
	}
	#else
	#if ( 1 == KEYPAD_UPPER_PORT_PINS)
	//setting the upper pin port as input
	KEYPAD_PORT_DIR &= ~( 0xf4 );
 1f4:	87 b3       	in	r24, 0x17	; 23
 1f6:	8b 70       	andi	r24, 0x0B	; 11
 1f8:	87 bb       	out	0x17, r24	; 23
	return KeyPad_4x4_withIC74922 ( (((KEYPAD_PORT_IN & 0xf0))>>4) + 1 );
 1fa:	86 b3       	in	r24, 0x16	; 22
 1fc:	82 95       	swap	r24
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	8f 5f       	subi	r24, 0xFF	; 255

// if we are using ic 74922
#else
static uint8_t KeyPad_4x4_withIC74922(uint8_t button_number)
{
	switch(button_number)
 202:	48 2f       	mov	r20, r24
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	fa 01       	movw	r30, r20
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	e0 31       	cpi	r30, 0x10	; 16
 20c:	f1 05       	cpc	r31, r1
 20e:	18 f5       	brcc	.+70     	; 0x256 <KeyPad_getPressedKey+0x62>
 210:	e6 5d       	subi	r30, 0xD6	; 214
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	0c 94 36 04 	jmp	0x86c	; 0x86c <__tablejump2__>
	{
		case 1: return '1';
		break;
		case 2: return '2';
 218:	82 e3       	ldi	r24, 0x32	; 50
 21a:	08 95       	ret
		break;
		case 3: return '3';
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	08 95       	ret
		break;
		case 4: return 'a'; /* ASCII Code of 'a' */
 220:	81 e6       	ldi	r24, 0x61	; 97
 222:	08 95       	ret
		break;
		case 5: return '4';
 224:	84 e3       	ldi	r24, 0x34	; 52
 226:	08 95       	ret
		break;
		case 6: return '5';
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	08 95       	ret
		break;
		case 7: return '6';
 22c:	86 e3       	ldi	r24, 0x36	; 54
 22e:	08 95       	ret
		break;
		case 8: return 'b'; /* ASCII Code of 'b' */
 230:	82 e6       	ldi	r24, 0x62	; 98
 232:	08 95       	ret
		break;
		case 9: return '7';
 234:	87 e3       	ldi	r24, 0x37	; 55
 236:	08 95       	ret
		break;
		case 10: return '8';
 238:	88 e3       	ldi	r24, 0x38	; 56
 23a:	08 95       	ret
		break;
		case 11: return '9';
 23c:	89 e3       	ldi	r24, 0x39	; 57
 23e:	08 95       	ret
		break;
		case 12: return 'c'; /* ASCII Code of 'c' */
 240:	83 e6       	ldi	r24, 0x63	; 99
 242:	08 95       	ret
		break;
		case 13: return '*';  /* ASCII of '*' */
 244:	8a e2       	ldi	r24, 0x2A	; 42
 246:	08 95       	ret
		break;
		case 14: return '0';
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	08 95       	ret
		break;
		case 15: return '#'; /* ASCII Code of '#' */
 24c:	83 e2       	ldi	r24, 0x23	; 35
 24e:	08 95       	ret
		break;
		case 16: return 'd'; /* ASCII Code of 'd' */
 250:	84 e6       	ldi	r24, 0x64	; 100
 252:	08 95       	ret
#else
static uint8_t KeyPad_4x4_withIC74922(uint8_t button_number)
{
	switch(button_number)
	{
		case 1: return '1';
 254:	81 e3       	ldi	r24, 0x31	; 49
	//write code for lower pins here
	
	#endif // end if we use upper pins
	
	#endif // end if we use IC
}
 256:	08 95       	ret

00000258 <LCD_sendCommand>:
	LCD_sendCommand(DISPLAY_ON);/* make sure that lcd is on*/
}

void LCD_sendCommand(uint8_t command)
{
	CLEAR_BIT(LCD_CTRL_PORT,RS);					/* Instruction Mode RS=0 */
 258:	dd 98       	cbi	0x1b, 5	; 27
	CLEAR_BIT(LCD_CTRL_PORT,RW);					/* write data to LCD so RW=0 */
 25a:	de 98       	cbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	e9 ef       	ldi	r30, 0xF9	; 249
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_sendCommand+0x8>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_sendCommand+0xe>
 266:	00 00       	nop
	_delay_ms(1);									/* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E);						/* Enable LCD E=1 */
 268:	df 9a       	sbi	0x1b, 7	; 27
 26a:	e9 ef       	ldi	r30, 0xF9	; 249
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_sendCommand+0x16>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_sendCommand+0x1c>
 274:	00 00       	nop
	_delay_ms(1);									/* delay for processing Tpw - Tdsw = 190ns */
	#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS							/* if the higher pins in lcd is used */
	//rest the 
	LCD_DATA_PORT = ((command & 0xF0));
 276:	98 2f       	mov	r25, r24
 278:	90 7f       	andi	r25, 0xF0	; 240
 27a:	95 bb       	out	0x15, r25	; 21
 27c:	e9 ef       	ldi	r30, 0xF9	; 249
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_sendCommand+0x28>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_sendCommand+0x2e>
 286:	00 00       	nop
	/* out the highest 4 bits of the required command to the data bus D0 --> D3 */
	LCD_DATA_PORT = ((command >> 4) & 0x0F);
	#endif

	_delay_ms(1);			/* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 288:	df 98       	cbi	0x1b, 7	; 27
 28a:	e9 ef       	ldi	r30, 0xF9	; 249
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_sendCommand+0x36>
 292:	00 c0       	rjmp	.+0      	; 0x294 <LCD_sendCommand+0x3c>
 294:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 296:	df 9a       	sbi	0x1b, 7	; 27
 298:	e9 ef       	ldi	r30, 0xF9	; 249
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_sendCommand+0x44>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_sendCommand+0x4a>
 2a2:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (command << 4) & 0xF0;
 2a4:	f0 e1       	ldi	r31, 0x10	; 16
 2a6:	8f 9f       	mul	r24, r31
 2a8:	c0 01       	movw	r24, r0
 2aa:	11 24       	eor	r1, r1
 2ac:	85 bb       	out	0x15, r24	; 21
 2ae:	89 ef       	ldi	r24, 0xF9	; 249
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_sendCommand+0x5a>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_sendCommand+0x60>
 2b8:	00 00       	nop
	#else
	/* out the lowest 4 bits of the required command to the data bus D0 --> D3 */
	LCD_DATA_PORT = (command & 0x0F);
	#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 2ba:	df 98       	cbi	0x1b, 7	; 27
 2bc:	e9 ef       	ldi	r30, 0xF9	; 249
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_sendCommand+0x68>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_sendCommand+0x6e>
 2c6:	00 00       	nop
 2c8:	08 95       	ret

000002ca <LCD_init>:

#include "lcd.h"

void LCD_init(void)
{
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
 2ca:	8a b3       	in	r24, 0x1a	; 26
 2cc:	80 6e       	ori	r24, 0xE0	; 224
 2ce:	8a bb       	out	0x1a, r24	; 26
	
	#if (DATA_BITS_MODE == 4)
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
 2d0:	84 b3       	in	r24, 0x14	; 20
 2d2:	80 6f       	ori	r24, 0xF0	; 240
 2d4:	84 bb       	out	0x14, r24	; 20
	#else
	LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
	#endif
	LCD_sendCommand(LCD_FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_sendCommand>
	LCD_sendCommand(LCD_FOUR_BIT_TWO_LINE_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
 2dc:	88 e2       	ldi	r24, 0x28	; 40
 2de:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
	LCD_sendCommand(LCD_Eight_BIT_TWO_LINE_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
 2e2:	8c e0       	ldi	r24, 0x0C	; 12
 2e4:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON);/* make sure that lcd is on*/
 2ee:	8c e0       	ldi	r24, 0x0C	; 12
 2f0:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_sendCommand>
 2f4:	08 95       	ret

000002f6 <LCD_displayCharacter>:
	#endif
}

void LCD_displayCharacter(uint8_t data)
{
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
 2f6:	dd 9a       	sbi	0x1b, 5	; 27
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
 2f8:	de 98       	cbi	0x1b, 6	; 27
 2fa:	e9 ef       	ldi	r30, 0xF9	; 249
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_displayCharacter+0x8>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_displayCharacter+0xe>
 304:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 306:	df 9a       	sbi	0x1b, 7	; 27
 308:	e9 ef       	ldi	r30, 0xF9	; 249
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	31 97       	sbiw	r30, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <LCD_displayCharacter+0x16>
 310:	00 c0       	rjmp	.+0      	; 0x312 <LCD_displayCharacter+0x1c>
 312:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (data & 0xF0);
 314:	98 2f       	mov	r25, r24
 316:	90 7f       	andi	r25, 0xF0	; 240
 318:	95 bb       	out	0x15, r25	; 21
 31a:	e9 ef       	ldi	r30, 0xF9	; 249
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_displayCharacter+0x28>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_displayCharacter+0x2e>
 324:	00 00       	nop
	#else
	LCD_DATA_PORT = ((data >> 4) & 0x0F);
	#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 326:	df 98       	cbi	0x1b, 7	; 27
 328:	e9 ef       	ldi	r30, 0xF9	; 249
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_displayCharacter+0x36>
 330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_displayCharacter+0x3c>
 332:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 334:	df 9a       	sbi	0x1b, 7	; 27
 336:	e9 ef       	ldi	r30, 0xF9	; 249
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <LCD_displayCharacter+0x44>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <LCD_displayCharacter+0x4a>
 340:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (data << 4) & 0xF0;
 342:	f0 e1       	ldi	r31, 0x10	; 16
 344:	8f 9f       	mul	r24, r31
 346:	c0 01       	movw	r24, r0
 348:	11 24       	eor	r1, r1
 34a:	85 bb       	out	0x15, r24	; 21
 34c:	89 ef       	ldi	r24, 0xF9	; 249
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCD_displayCharacter+0x5a>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_displayCharacter+0x60>
 356:	00 00       	nop
	#else
	LCD_DATA_PORT = (data & 0x0F);
	#endif
	
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 358:	df 98       	cbi	0x1b, 7	; 27
 35a:	e9 ef       	ldi	r30, 0xF9	; 249
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <LCD_displayCharacter+0x68>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_displayCharacter+0x6e>
 364:	00 00       	nop
 366:	08 95       	ret

00000368 <LCD_displayString>:
	_delay_ms(1); /* delay for processing Th = 13ns */
	#endif
}

void LCD_displayString(const char *Str)
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	ec 01       	movw	r28, r24
	while((*Str) != '\0')
 36e:	88 81       	ld	r24, Y
 370:	88 23       	and	r24, r24
 372:	31 f0       	breq	.+12     	; 0x380 <LCD_displayString+0x18>
 374:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_displayCharacter(*Str);
 376:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_displayCharacter>
	#endif
}

void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
 37a:	89 91       	ld	r24, Y+
 37c:	81 11       	cpse	r24, r1
 37e:	fb cf       	rjmp	.-10     	; 0x376 <LCD_displayString+0xe>
	{
	LCD_displayCharacter(Str[i]);
	i++;
	}
	*********************************************************/
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8_t row,uint8_t col)
{
	uint8_t Address;
	
	/* first of all calculate the required address */
	switch(row)
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	31 f0       	breq	.+12     	; 0x396 <LCD_goToRowColumn+0x10>
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	31 f0       	breq	.+12     	; 0x39a <LCD_goToRowColumn+0x14>
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	29 f4       	brne	.+10     	; 0x39c <LCD_goToRowColumn+0x16>
		/* only first 2 cases for lcd 2*16 and second 2 for 4*16 */
		case 0:
		Address=col;
		break;
		case 1:
		Address=col+0x40;
 392:	60 5c       	subi	r22, 0xC0	; 192
		break;
 394:	03 c0       	rjmp	.+6      	; 0x39c <LCD_goToRowColumn+0x16>
		
		case 2:
		Address=col+0x10;
 396:	60 5f       	subi	r22, 0xF0	; 240
		break;
 398:	01 c0       	rjmp	.+2      	; 0x39c <LCD_goToRowColumn+0x16>
		case 3:
		Address=col+0x50;
 39a:	60 5b       	subi	r22, 0xB0	; 176
		Address=col;
	}
	/* to write to a specific address in the LCD
	* we need to apply the corresponding command 0b10000000+Address */
	
	LCD_sendCommand(Address | DDRAM_CURSOR_LOCATION);
 39c:	86 2f       	mov	r24, r22
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_sendCommand>
 3a4:	08 95       	ret

000003a6 <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
 3ac:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
 3b0:	ce 01       	movw	r24, r28
 3b2:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_displayString>
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	60 97       	sbiw	r28, 0x10	; 16
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	de bf       	out	0x3e, r29	; 62
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3d0:	4a e0       	ldi	r20, 0x0A	; 10
 3d2:	be 01       	movw	r22, r28
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	0e 94 45 04 	call	0x88a	; 0x88a <__itoa_ncheck>
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* itoa convert int to char, 10 for decimal */
	LCD_displayString(buff);
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_displayString>
}
 3e4:	60 96       	adiw	r28, 0x10	; 16
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <LCD_clearScreen>:



void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_sendCommand>
 3fc:	08 95       	ret

000003fe <Timer1_Fast_PWM_init>:
/*						servo motors                                                                     */
/************************************************************************/

void Timer1_Fast_PWM_init()
{
	SET_BIT(SERVO_OUT_PORT_DIR,SERVO_OUT_PIN);
 3fe:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;		/* Set timer1 initial count to zero */
 400:	1d bc       	out	0x2d, r1	; 45
 402:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;	/* Set TOP count for timer1 in ICR1 register */
 404:	83 ec       	ldi	r24, 0xC3	; 195
 406:	99 e0       	ldi	r25, 0x09	; 9
 408:	97 bd       	out	0x27, r25	; 39
 40a:	86 bd       	out	0x26, r24	; 38
	TCCR1A |= (1<<WGM11) ;
 40c:	8f b5       	in	r24, 0x2f	; 47
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	8f bd       	out	0x2f, r24	; 47
	/* Configure timer control register TCCR1A
	* 1. Fast Pwm Mode with the TOP in ICR1 WGM12=01 WGM13=1
	* 2. Prescaler = F_CPU/64
	*/
	TCCR1B |= (1<<WGM12) | (1<<WGM13)  | (1<<CS11);
 412:	8e b5       	in	r24, 0x2e	; 46
 414:	8a 61       	ori	r24, 0x1A	; 26
 416:	8e bd       	out	0x2e, r24	; 46
 418:	08 95       	ret

0000041a <Timer1_Fast_PWM_rotate>:
	
}
void Timer1_Fast_PWM_rotate(unsigned short duty_cycle)
{
	TCNT1 = 0;		/* Set timer1 initial count to zero */
 41a:	1d bc       	out	0x2d, r1	; 45
 41c:	1c bc       	out	0x2c, r1	; 44

	OCR1A = duty_cycle; /* Set the compare value */
 41e:	9b bd       	out	0x2b, r25	; 43
 420:	8a bd       	out	0x2a, r24	; 42
	
	TCCR1A |= (1<<COM1A1);
 422:	8f b5       	in	r24, 0x2f	; 47
 424:	80 68       	ori	r24, 0x80	; 128
 426:	8f bd       	out	0x2f, r24	; 47
 428:	08 95       	ret

0000042a <Timer1_Fast_PWM_stop>:

}

void Timer1_Fast_PWM_stop()
{
	TCCR1A &= ~(1<<COM1A1);
 42a:	8f b5       	in	r24, 0x2f	; 47
 42c:	8f 77       	andi	r24, 0x7F	; 127
 42e:	8f bd       	out	0x2f, r24	; 47
 430:	08 95       	ret

00000432 <get_temperture>:
#include "ADCFunc.h"



uint8_t get_temperture(){
	ADC_init();
 432:	0e 94 89 00 	call	0x112	; 0x112 <ADC_init>
	ADC_select_channel(temp_pin);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 a0 00 	call	0x140	; 0x140 <ADC_select_channel>
	ADC_start_conversion();
 43c:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_start_conversion>
	return (ADC_read()/temp_factor);
 440:	0e 94 97 00 	call	0x12e	; 0x12e <ADC_read>
 444:	bc 01       	movw	r22, r24
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 3b 03 	call	0x676	; 0x676 <__floatunsisf>
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	40 e8       	ldi	r20, 0x80	; 128
 454:	5e e3       	ldi	r21, 0x3E	; 62
 456:	0e 94 a1 03 	call	0x742	; 0x742 <__mulsf3>
 45a:	0e 94 0c 03 	call	0x618	; 0x618 <__fixunssfsi>
 45e:	86 2f       	mov	r24, r22
}
 460:	08 95       	ret

00000462 <get_LDR>:

//LDR

uint8_t get_LDR()
{
	ADC_init();
 462:	0e 94 89 00 	call	0x112	; 0x112 <ADC_init>
	ADC_select_channel(LDR_PIN);
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 a0 00 	call	0x140	; 0x140 <ADC_select_channel>
	ADC_start_conversion();
 46c:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_start_conversion>
	return (ADC_read());
 470:	0e 94 97 00 	call	0x12e	; 0x12e <ADC_read>
 474:	08 95       	ret

00000476 <main>:
	uint16_t adc_out;
	
	char key;
	
	// disable jtag protocol
	MCUCSR = (1<<JTD);
 476:	80 e8       	ldi	r24, 0x80	; 128
 478:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
 47a:	84 bf       	out	0x34, r24	; 52
	// set interrupts for INT2
	sei();
 47c:	78 94       	sei
	SET_BIT(GICR,INT2);
 47e:	8b b7       	in	r24, 0x3b	; 59
 480:	80 62       	ori	r24, 0x20	; 32
 482:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCSR,ISC2);
 484:	84 b7       	in	r24, 0x34	; 52
 486:	80 64       	ori	r24, 0x40	; 64
 488:	84 bf       	out	0x34, r24	; 52
	
	// write default password to EEPROM
	EEPROM_WriteNByte(GATE_PASSWORD_ADDRESS,(uint8_t*)default_pass,PASS_LEN);
 48a:	44 e0       	ldi	r20, 0x04	; 4
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	60 e6       	ldi	r22, 0x60	; 96
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	80 e1       	ldi	r24, 0x10	; 16
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 c2 00 	call	0x184	; 0x184 <EEPROM_WriteNByte>
	
	LCD_init();
 49a:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_init>
	Timer1_Fast_PWM_init();
 49e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Timer1_Fast_PWM_init>
 4a2:	87 ea       	ldi	r24, 0xA7	; 167
 4a4:	91 e6       	ldi	r25, 0x61	; 97
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <main+0x30>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <main+0x36>
 4ac:	00 00       	nop
	_delay_ms(100);

	SET_BIT(DDRB,PB0);
 4ae:	b8 9a       	sbi	0x17, 0	; 23
	SET_BIT(PORTB,PB0);
 4b0:	c0 9a       	sbi	0x18, 0	; 24
	

	while (1)
	{
		LCD_displayStringRowColumn(1,2,"temp : ");
 4b2:	45 e6       	ldi	r20, 0x65	; 101
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	62 e0       	ldi	r22, 0x02	; 2
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,8);
 4be:	68 e0       	ldi	r22, 0x08	; 8
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_goToRowColumn>
		LCD_intgerToString((int)get_temperture());
 4c6:	0e 94 19 02 	call	0x432	; 0x432 <get_temperture>
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_intgerToString>
		LCD_intgerToString((int)get_LDR());
 4d0:	0e 94 31 02 	call	0x462	; 0x462 <get_LDR>
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_intgerToString>
		if(get_LDR()<100)
 4da:	0e 94 31 02 	call	0x462	; 0x462 <get_LDR>
 4de:	84 36       	cpi	r24, 0x64	; 100
 4e0:	10 f4       	brcc	.+4      	; 0x4e6 <main+0x70>
		{
			CLEAR_BIT(PORTB,PB0);	
 4e2:	c0 98       	cbi	0x18, 0	; 24
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <main+0x72>
		}else{
			SET_BIT(PORTB,PB0);
 4e6:	c0 9a       	sbi	0x18, 0	; 24
 4e8:	9f eb       	ldi	r25, 0xBF	; 191
 4ea:	27 e2       	ldi	r18, 0x27	; 39
 4ec:	89 e0       	ldi	r24, 0x09	; 9
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	20 40       	sbci	r18, 0x00	; 0
 4f2:	80 40       	sbci	r24, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <main+0x78>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0x82>
 4f8:	00 00       	nop
 4fa:	db cf       	rjmp	.-74     	; 0x4b2 <main+0x3c>

000004fc <__vector_3>:

	*/
} // end main

ISR (INT2_vect)
{
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	2f 93       	push	r18
 508:	3f 93       	push	r19
 50a:	4f 93       	push	r20
 50c:	5f 93       	push	r21
 50e:	6f 93       	push	r22
 510:	7f 93       	push	r23
 512:	8f 93       	push	r24
 514:	9f 93       	push	r25
 516:	af 93       	push	r26
 518:	bf 93       	push	r27
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	LCD_displayStringRowColumn(0,0,"psswrd is:");
 522:	4d e6       	ldi	r20, 0x6D	; 109
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_displayStringRowColumn>
	psswrd[passItr]=KeyPad_getPressedKey();
 52e:	c0 91 a2 00 	lds	r28, 0x00A2	; 0x8000a2 <__data_end>
 532:	d0 e0       	ldi	r29, 0x00	; 0
 534:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <KeyPad_getPressedKey>
 538:	c5 55       	subi	r28, 0x55	; 85
 53a:	df 4f       	sbci	r29, 0xFF	; 255
 53c:	88 83       	st	Y, r24
	psswrd[passItr+1]='\0';
 53e:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <__data_end>
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	e5 55       	subi	r30, 0x55	; 85
 546:	ff 4f       	sbci	r31, 0xFF	; 255
 548:	11 82       	std	Z+1, r1	; 0x01
	LCD_displayStringRowColumn(0,10,psswrd);
 54a:	4b ea       	ldi	r20, 0xAB	; 171
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	6a e0       	ldi	r22, 0x0A	; 10
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_displayStringRowColumn>
	passItr++;
 556:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end>
 55a:	8f 5f       	subi	r24, 0xFF	; 255
	
	if ( passItr >= PASS_LEN)
 55c:	84 30       	cpi	r24, 0x04	; 4
 55e:	18 f4       	brcc	.+6      	; 0x566 <__vector_3+0x6a>
{
	LCD_displayStringRowColumn(0,0,"psswrd is:");
	psswrd[passItr]=KeyPad_getPressedKey();
	psswrd[passItr+1]='\0';
	LCD_displayStringRowColumn(0,10,psswrd);
	passItr++;
 560:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end>
 564:	46 c0       	rjmp	.+140    	; 0x5f2 <__vector_3+0xf6>
	
	if ( passItr >= PASS_LEN)
	{
		passItr=0;
 566:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__data_end>
 56a:	2f e9       	ldi	r18, 0x9F	; 159
 56c:	86 e8       	ldi	r24, 0x86	; 134
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	21 50       	subi	r18, 0x01	; 1
 572:	80 40       	sbci	r24, 0x00	; 0
 574:	90 40       	sbci	r25, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <__vector_3+0x74>
 578:	00 c0       	rjmp	.+0      	; 0x57a <__vector_3+0x7e>
 57a:	00 00       	nop
		
		_delay_ms(500);
		LCD_clearScreen();
 57c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_clearScreen>
		EEPROM_readNByte( GATE_PASSWORD_ADDRESS, (uint8_t *) GATE_PASSWORD, PASS_LEN);
 580:	44 e0       	ldi	r20, 0x04	; 4
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	63 ea       	ldi	r22, 0xA3	; 163
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	80 e1       	ldi	r24, 0x10	; 16
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 de 00 	call	0x1bc	; 0x1bc <EEPROM_readNByte>
		if (!strcmp(psswrd,GATE_PASSWORD))
 590:	63 ea       	ldi	r22, 0xA3	; 163
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	8b ea       	ldi	r24, 0xAB	; 171
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 3c 04 	call	0x878	; 0x878 <strcmp>
 59c:	89 2b       	or	r24, r25
 59e:	a1 f4       	brne	.+40     	; 0x5c8 <__vector_3+0xcc>
		{
			LCD_displayString("gate opens now");
 5a0:	88 e7       	ldi	r24, 0x78	; 120
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_displayString>
			Timer1_Fast_PWM_rotate(SERVO_DEG_180);
 5a8:	8a ef       	ldi	r24, 0xFA	; 250
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 0d 02 	call	0x41a	; 0x41a <Timer1_Fast_PWM_rotate>
 5b0:	2f e3       	ldi	r18, 0x3F	; 63
 5b2:	82 e4       	ldi	r24, 0x42	; 66
 5b4:	9f e0       	ldi	r25, 0x0F	; 15
 5b6:	21 50       	subi	r18, 0x01	; 1
 5b8:	80 40       	sbci	r24, 0x00	; 0
 5ba:	90 40       	sbci	r25, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <__vector_3+0xba>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <__vector_3+0xc4>
 5c0:	00 00       	nop
			_delay_ms(5000);
			Timer1_Fast_PWM_stop();
 5c2:	0e 94 15 02 	call	0x42a	; 0x42a <Timer1_Fast_PWM_stop>
 5c6:	13 c0       	rjmp	.+38     	; 0x5ee <__vector_3+0xf2>
		}
		else
		{
			LCD_displayString("WRONG PSSWRD :(");
 5c8:	87 e8       	ldi	r24, 0x87	; 135
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 b4 01 	call	0x368	; 0x368 <LCD_displayString>
			LCD_displayStringRowColumn(1,3,"try again");
 5d0:	47 e9       	ldi	r20, 0x97	; 151
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	63 e0       	ldi	r22, 0x03	; 3
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_displayStringRowColumn>
 5dc:	2f e3       	ldi	r18, 0x3F	; 63
 5de:	8d e0       	ldi	r24, 0x0D	; 13
 5e0:	93 e0       	ldi	r25, 0x03	; 3
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	90 40       	sbci	r25, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <__vector_3+0xe6>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <__vector_3+0xf0>
 5ec:	00 00       	nop
			_delay_ms(1000);
		}
		LCD_clearScreen();
 5ee:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_clearScreen>

	}
 5f2:	ff 91       	pop	r31
 5f4:	ef 91       	pop	r30
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	bf 91       	pop	r27
 5fc:	af 91       	pop	r26
 5fe:	9f 91       	pop	r25
 600:	8f 91       	pop	r24
 602:	7f 91       	pop	r23
 604:	6f 91       	pop	r22
 606:	5f 91       	pop	r21
 608:	4f 91       	pop	r20
 60a:	3f 91       	pop	r19
 60c:	2f 91       	pop	r18
 60e:	0f 90       	pop	r0
 610:	0f be       	out	0x3f, r0	; 63
 612:	0f 90       	pop	r0
 614:	1f 90       	pop	r1
 616:	18 95       	reti

00000618 <__fixunssfsi>:
 618:	0e 94 80 03 	call	0x700	; 0x700 <__fp_splitA>
 61c:	88 f0       	brcs	.+34     	; 0x640 <__fixunssfsi+0x28>
 61e:	9f 57       	subi	r25, 0x7F	; 127
 620:	98 f0       	brcs	.+38     	; 0x648 <__fixunssfsi+0x30>
 622:	b9 2f       	mov	r27, r25
 624:	99 27       	eor	r25, r25
 626:	b7 51       	subi	r27, 0x17	; 23
 628:	b0 f0       	brcs	.+44     	; 0x656 <__fixunssfsi+0x3e>
 62a:	e1 f0       	breq	.+56     	; 0x664 <__fixunssfsi+0x4c>
 62c:	66 0f       	add	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	88 1f       	adc	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	1a f0       	brmi	.+6      	; 0x63c <__fixunssfsi+0x24>
 636:	ba 95       	dec	r27
 638:	c9 f7       	brne	.-14     	; 0x62c <__fixunssfsi+0x14>
 63a:	14 c0       	rjmp	.+40     	; 0x664 <__fixunssfsi+0x4c>
 63c:	b1 30       	cpi	r27, 0x01	; 1
 63e:	91 f0       	breq	.+36     	; 0x664 <__fixunssfsi+0x4c>
 640:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_zero>
 644:	b1 e0       	ldi	r27, 0x01	; 1
 646:	08 95       	ret
 648:	0c 94 9a 03 	jmp	0x734	; 0x734 <__fp_zero>
 64c:	67 2f       	mov	r22, r23
 64e:	78 2f       	mov	r23, r24
 650:	88 27       	eor	r24, r24
 652:	b8 5f       	subi	r27, 0xF8	; 248
 654:	39 f0       	breq	.+14     	; 0x664 <__fixunssfsi+0x4c>
 656:	b9 3f       	cpi	r27, 0xF9	; 249
 658:	cc f3       	brlt	.-14     	; 0x64c <__fixunssfsi+0x34>
 65a:	86 95       	lsr	r24
 65c:	77 95       	ror	r23
 65e:	67 95       	ror	r22
 660:	b3 95       	inc	r27
 662:	d9 f7       	brne	.-10     	; 0x65a <__fixunssfsi+0x42>
 664:	3e f4       	brtc	.+14     	; 0x674 <__fixunssfsi+0x5c>
 666:	90 95       	com	r25
 668:	80 95       	com	r24
 66a:	70 95       	com	r23
 66c:	61 95       	neg	r22
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	8f 4f       	sbci	r24, 0xFF	; 255
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	08 95       	ret

00000676 <__floatunsisf>:
 676:	e8 94       	clt
 678:	09 c0       	rjmp	.+18     	; 0x68c <__floatsisf+0x12>

0000067a <__floatsisf>:
 67a:	97 fb       	bst	r25, 7
 67c:	3e f4       	brtc	.+14     	; 0x68c <__floatsisf+0x12>
 67e:	90 95       	com	r25
 680:	80 95       	com	r24
 682:	70 95       	com	r23
 684:	61 95       	neg	r22
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	8f 4f       	sbci	r24, 0xFF	; 255
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	99 23       	and	r25, r25
 68e:	a9 f0       	breq	.+42     	; 0x6ba <__floatsisf+0x40>
 690:	f9 2f       	mov	r31, r25
 692:	96 e9       	ldi	r25, 0x96	; 150
 694:	bb 27       	eor	r27, r27
 696:	93 95       	inc	r25
 698:	f6 95       	lsr	r31
 69a:	87 95       	ror	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b7 95       	ror	r27
 6a2:	f1 11       	cpse	r31, r1
 6a4:	f8 cf       	rjmp	.-16     	; 0x696 <__floatsisf+0x1c>
 6a6:	fa f4       	brpl	.+62     	; 0x6e6 <__floatsisf+0x6c>
 6a8:	bb 0f       	add	r27, r27
 6aa:	11 f4       	brne	.+4      	; 0x6b0 <__floatsisf+0x36>
 6ac:	60 ff       	sbrs	r22, 0
 6ae:	1b c0       	rjmp	.+54     	; 0x6e6 <__floatsisf+0x6c>
 6b0:	6f 5f       	subi	r22, 0xFF	; 255
 6b2:	7f 4f       	sbci	r23, 0xFF	; 255
 6b4:	8f 4f       	sbci	r24, 0xFF	; 255
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	16 c0       	rjmp	.+44     	; 0x6e6 <__floatsisf+0x6c>
 6ba:	88 23       	and	r24, r24
 6bc:	11 f0       	breq	.+4      	; 0x6c2 <__floatsisf+0x48>
 6be:	96 e9       	ldi	r25, 0x96	; 150
 6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <__floatsisf+0x6a>
 6c2:	77 23       	and	r23, r23
 6c4:	21 f0       	breq	.+8      	; 0x6ce <__floatsisf+0x54>
 6c6:	9e e8       	ldi	r25, 0x8E	; 142
 6c8:	87 2f       	mov	r24, r23
 6ca:	76 2f       	mov	r23, r22
 6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <__floatsisf+0x5e>
 6ce:	66 23       	and	r22, r22
 6d0:	71 f0       	breq	.+28     	; 0x6ee <__floatsisf+0x74>
 6d2:	96 e8       	ldi	r25, 0x86	; 134
 6d4:	86 2f       	mov	r24, r22
 6d6:	70 e0       	ldi	r23, 0x00	; 0
 6d8:	60 e0       	ldi	r22, 0x00	; 0
 6da:	2a f0       	brmi	.+10     	; 0x6e6 <__floatsisf+0x6c>
 6dc:	9a 95       	dec	r25
 6de:	66 0f       	add	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	da f7       	brpl	.-10     	; 0x6dc <__floatsisf+0x62>
 6e6:	88 0f       	add	r24, r24
 6e8:	96 95       	lsr	r25
 6ea:	87 95       	ror	r24
 6ec:	97 f9       	bld	r25, 7
 6ee:	08 95       	ret

000006f0 <__fp_split3>:
 6f0:	57 fd       	sbrc	r21, 7
 6f2:	90 58       	subi	r25, 0x80	; 128
 6f4:	44 0f       	add	r20, r20
 6f6:	55 1f       	adc	r21, r21
 6f8:	59 f0       	breq	.+22     	; 0x710 <__fp_splitA+0x10>
 6fa:	5f 3f       	cpi	r21, 0xFF	; 255
 6fc:	71 f0       	breq	.+28     	; 0x71a <__fp_splitA+0x1a>
 6fe:	47 95       	ror	r20

00000700 <__fp_splitA>:
 700:	88 0f       	add	r24, r24
 702:	97 fb       	bst	r25, 7
 704:	99 1f       	adc	r25, r25
 706:	61 f0       	breq	.+24     	; 0x720 <__fp_splitA+0x20>
 708:	9f 3f       	cpi	r25, 0xFF	; 255
 70a:	79 f0       	breq	.+30     	; 0x72a <__fp_splitA+0x2a>
 70c:	87 95       	ror	r24
 70e:	08 95       	ret
 710:	12 16       	cp	r1, r18
 712:	13 06       	cpc	r1, r19
 714:	14 06       	cpc	r1, r20
 716:	55 1f       	adc	r21, r21
 718:	f2 cf       	rjmp	.-28     	; 0x6fe <__fp_split3+0xe>
 71a:	46 95       	lsr	r20
 71c:	f1 df       	rcall	.-30     	; 0x700 <__fp_splitA>
 71e:	08 c0       	rjmp	.+16     	; 0x730 <__fp_splitA+0x30>
 720:	16 16       	cp	r1, r22
 722:	17 06       	cpc	r1, r23
 724:	18 06       	cpc	r1, r24
 726:	99 1f       	adc	r25, r25
 728:	f1 cf       	rjmp	.-30     	; 0x70c <__fp_splitA+0xc>
 72a:	86 95       	lsr	r24
 72c:	71 05       	cpc	r23, r1
 72e:	61 05       	cpc	r22, r1
 730:	08 94       	sec
 732:	08 95       	ret

00000734 <__fp_zero>:
 734:	e8 94       	clt

00000736 <__fp_szero>:
 736:	bb 27       	eor	r27, r27
 738:	66 27       	eor	r22, r22
 73a:	77 27       	eor	r23, r23
 73c:	cb 01       	movw	r24, r22
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret

00000742 <__mulsf3>:
 742:	0e 94 b4 03 	call	0x768	; 0x768 <__mulsf3x>
 746:	0c 94 25 04 	jmp	0x84a	; 0x84a <__fp_round>
 74a:	0e 94 17 04 	call	0x82e	; 0x82e <__fp_pscA>
 74e:	38 f0       	brcs	.+14     	; 0x75e <__mulsf3+0x1c>
 750:	0e 94 1e 04 	call	0x83c	; 0x83c <__fp_pscB>
 754:	20 f0       	brcs	.+8      	; 0x75e <__mulsf3+0x1c>
 756:	95 23       	and	r25, r21
 758:	11 f0       	breq	.+4      	; 0x75e <__mulsf3+0x1c>
 75a:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_inf>
 75e:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_nan>
 762:	11 24       	eor	r1, r1
 764:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>

00000768 <__mulsf3x>:
 768:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_split3>
 76c:	70 f3       	brcs	.-36     	; 0x74a <__mulsf3+0x8>

0000076e <__mulsf3_pse>:
 76e:	95 9f       	mul	r25, r21
 770:	c1 f3       	breq	.-16     	; 0x762 <__mulsf3+0x20>
 772:	95 0f       	add	r25, r21
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	55 1f       	adc	r21, r21
 778:	62 9f       	mul	r22, r18
 77a:	f0 01       	movw	r30, r0
 77c:	72 9f       	mul	r23, r18
 77e:	bb 27       	eor	r27, r27
 780:	f0 0d       	add	r31, r0
 782:	b1 1d       	adc	r27, r1
 784:	63 9f       	mul	r22, r19
 786:	aa 27       	eor	r26, r26
 788:	f0 0d       	add	r31, r0
 78a:	b1 1d       	adc	r27, r1
 78c:	aa 1f       	adc	r26, r26
 78e:	64 9f       	mul	r22, r20
 790:	66 27       	eor	r22, r22
 792:	b0 0d       	add	r27, r0
 794:	a1 1d       	adc	r26, r1
 796:	66 1f       	adc	r22, r22
 798:	82 9f       	mul	r24, r18
 79a:	22 27       	eor	r18, r18
 79c:	b0 0d       	add	r27, r0
 79e:	a1 1d       	adc	r26, r1
 7a0:	62 1f       	adc	r22, r18
 7a2:	73 9f       	mul	r23, r19
 7a4:	b0 0d       	add	r27, r0
 7a6:	a1 1d       	adc	r26, r1
 7a8:	62 1f       	adc	r22, r18
 7aa:	83 9f       	mul	r24, r19
 7ac:	a0 0d       	add	r26, r0
 7ae:	61 1d       	adc	r22, r1
 7b0:	22 1f       	adc	r18, r18
 7b2:	74 9f       	mul	r23, r20
 7b4:	33 27       	eor	r19, r19
 7b6:	a0 0d       	add	r26, r0
 7b8:	61 1d       	adc	r22, r1
 7ba:	23 1f       	adc	r18, r19
 7bc:	84 9f       	mul	r24, r20
 7be:	60 0d       	add	r22, r0
 7c0:	21 1d       	adc	r18, r1
 7c2:	82 2f       	mov	r24, r18
 7c4:	76 2f       	mov	r23, r22
 7c6:	6a 2f       	mov	r22, r26
 7c8:	11 24       	eor	r1, r1
 7ca:	9f 57       	subi	r25, 0x7F	; 127
 7cc:	50 40       	sbci	r21, 0x00	; 0
 7ce:	9a f0       	brmi	.+38     	; 0x7f6 <__mulsf3_pse+0x88>
 7d0:	f1 f0       	breq	.+60     	; 0x80e <__mulsf3_pse+0xa0>
 7d2:	88 23       	and	r24, r24
 7d4:	4a f0       	brmi	.+18     	; 0x7e8 <__mulsf3_pse+0x7a>
 7d6:	ee 0f       	add	r30, r30
 7d8:	ff 1f       	adc	r31, r31
 7da:	bb 1f       	adc	r27, r27
 7dc:	66 1f       	adc	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	91 50       	subi	r25, 0x01	; 1
 7e4:	50 40       	sbci	r21, 0x00	; 0
 7e6:	a9 f7       	brne	.-22     	; 0x7d2 <__mulsf3_pse+0x64>
 7e8:	9e 3f       	cpi	r25, 0xFE	; 254
 7ea:	51 05       	cpc	r21, r1
 7ec:	80 f0       	brcs	.+32     	; 0x80e <__mulsf3_pse+0xa0>
 7ee:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__fp_inf>
 7f2:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 7f6:	5f 3f       	cpi	r21, 0xFF	; 255
 7f8:	e4 f3       	brlt	.-8      	; 0x7f2 <__mulsf3_pse+0x84>
 7fa:	98 3e       	cpi	r25, 0xE8	; 232
 7fc:	d4 f3       	brlt	.-12     	; 0x7f2 <__mulsf3_pse+0x84>
 7fe:	86 95       	lsr	r24
 800:	77 95       	ror	r23
 802:	67 95       	ror	r22
 804:	b7 95       	ror	r27
 806:	f7 95       	ror	r31
 808:	e7 95       	ror	r30
 80a:	9f 5f       	subi	r25, 0xFF	; 255
 80c:	c1 f7       	brne	.-16     	; 0x7fe <__mulsf3_pse+0x90>
 80e:	fe 2b       	or	r31, r30
 810:	88 0f       	add	r24, r24
 812:	91 1d       	adc	r25, r1
 814:	96 95       	lsr	r25
 816:	87 95       	ror	r24
 818:	97 f9       	bld	r25, 7
 81a:	08 95       	ret

0000081c <__fp_inf>:
 81c:	97 f9       	bld	r25, 7
 81e:	9f 67       	ori	r25, 0x7F	; 127
 820:	80 e8       	ldi	r24, 0x80	; 128
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	60 e0       	ldi	r22, 0x00	; 0
 826:	08 95       	ret

00000828 <__fp_nan>:
 828:	9f ef       	ldi	r25, 0xFF	; 255
 82a:	80 ec       	ldi	r24, 0xC0	; 192
 82c:	08 95       	ret

0000082e <__fp_pscA>:
 82e:	00 24       	eor	r0, r0
 830:	0a 94       	dec	r0
 832:	16 16       	cp	r1, r22
 834:	17 06       	cpc	r1, r23
 836:	18 06       	cpc	r1, r24
 838:	09 06       	cpc	r0, r25
 83a:	08 95       	ret

0000083c <__fp_pscB>:
 83c:	00 24       	eor	r0, r0
 83e:	0a 94       	dec	r0
 840:	12 16       	cp	r1, r18
 842:	13 06       	cpc	r1, r19
 844:	14 06       	cpc	r1, r20
 846:	05 06       	cpc	r0, r21
 848:	08 95       	ret

0000084a <__fp_round>:
 84a:	09 2e       	mov	r0, r25
 84c:	03 94       	inc	r0
 84e:	00 0c       	add	r0, r0
 850:	11 f4       	brne	.+4      	; 0x856 <__fp_round+0xc>
 852:	88 23       	and	r24, r24
 854:	52 f0       	brmi	.+20     	; 0x86a <__stack+0xb>
 856:	bb 0f       	add	r27, r27
 858:	40 f4       	brcc	.+16     	; 0x86a <__stack+0xb>
 85a:	bf 2b       	or	r27, r31
 85c:	11 f4       	brne	.+4      	; 0x862 <__stack+0x3>
 85e:	60 ff       	sbrs	r22, 0
 860:	04 c0       	rjmp	.+8      	; 0x86a <__stack+0xb>
 862:	6f 5f       	subi	r22, 0xFF	; 255
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	08 95       	ret

0000086c <__tablejump2__>:
 86c:	ee 0f       	add	r30, r30
 86e:	ff 1f       	adc	r31, r31
 870:	05 90       	lpm	r0, Z+
 872:	f4 91       	lpm	r31, Z
 874:	e0 2d       	mov	r30, r0
 876:	09 94       	ijmp

00000878 <strcmp>:
 878:	fb 01       	movw	r30, r22
 87a:	dc 01       	movw	r26, r24
 87c:	8d 91       	ld	r24, X+
 87e:	01 90       	ld	r0, Z+
 880:	80 19       	sub	r24, r0
 882:	01 10       	cpse	r0, r1
 884:	d9 f3       	breq	.-10     	; 0x87c <strcmp+0x4>
 886:	99 0b       	sbc	r25, r25
 888:	08 95       	ret

0000088a <__itoa_ncheck>:
 88a:	bb 27       	eor	r27, r27
 88c:	4a 30       	cpi	r20, 0x0A	; 10
 88e:	31 f4       	brne	.+12     	; 0x89c <__itoa_ncheck+0x12>
 890:	99 23       	and	r25, r25
 892:	22 f4       	brpl	.+8      	; 0x89c <__itoa_ncheck+0x12>
 894:	bd e2       	ldi	r27, 0x2D	; 45
 896:	90 95       	com	r25
 898:	81 95       	neg	r24
 89a:	9f 4f       	sbci	r25, 0xFF	; 255
 89c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__utoa_common>

000008a0 <__utoa_ncheck>:
 8a0:	bb 27       	eor	r27, r27

000008a2 <__utoa_common>:
 8a2:	fb 01       	movw	r30, r22
 8a4:	55 27       	eor	r21, r21
 8a6:	aa 27       	eor	r26, r26
 8a8:	88 0f       	add	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	aa 1f       	adc	r26, r26
 8ae:	a4 17       	cp	r26, r20
 8b0:	10 f0       	brcs	.+4      	; 0x8b6 <__utoa_common+0x14>
 8b2:	a4 1b       	sub	r26, r20
 8b4:	83 95       	inc	r24
 8b6:	50 51       	subi	r21, 0x10	; 16
 8b8:	b9 f7       	brne	.-18     	; 0x8a8 <__utoa_common+0x6>
 8ba:	a0 5d       	subi	r26, 0xD0	; 208
 8bc:	aa 33       	cpi	r26, 0x3A	; 58
 8be:	08 f0       	brcs	.+2      	; 0x8c2 <__utoa_common+0x20>
 8c0:	a9 5d       	subi	r26, 0xD9	; 217
 8c2:	a1 93       	st	Z+, r26
 8c4:	00 97       	sbiw	r24, 0x00	; 0
 8c6:	79 f7       	brne	.-34     	; 0x8a6 <__utoa_common+0x4>
 8c8:	b1 11       	cpse	r27, r1
 8ca:	b1 93       	st	Z+, r27
 8cc:	11 92       	st	Z+, r1
 8ce:	cb 01       	movw	r24, r22
 8d0:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <strrev>

000008d4 <strrev>:
 8d4:	dc 01       	movw	r26, r24
 8d6:	fc 01       	movw	r30, r24
 8d8:	67 2f       	mov	r22, r23
 8da:	71 91       	ld	r23, Z+
 8dc:	77 23       	and	r23, r23
 8de:	e1 f7       	brne	.-8      	; 0x8d8 <strrev+0x4>
 8e0:	32 97       	sbiw	r30, 0x02	; 2
 8e2:	04 c0       	rjmp	.+8      	; 0x8ec <strrev+0x18>
 8e4:	7c 91       	ld	r23, X
 8e6:	6d 93       	st	X+, r22
 8e8:	70 83       	st	Z, r23
 8ea:	62 91       	ld	r22, -Z
 8ec:	ae 17       	cp	r26, r30
 8ee:	bf 07       	cpc	r27, r31
 8f0:	c8 f3       	brcs	.-14     	; 0x8e4 <strrev+0x10>
 8f2:	08 95       	ret

000008f4 <_exit>:
 8f4:	f8 94       	cli

000008f6 <__stop_program>:
 8f6:	ff cf       	rjmp	.-2      	; 0x8f6 <__stop_program>
