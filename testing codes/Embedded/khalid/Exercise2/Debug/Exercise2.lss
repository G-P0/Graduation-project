
Exercise2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000408  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006b5  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_Timer0_Init>:
  * duty cycle 0%   --> Motor Stop
  */
 
#include <avr/io.h>

void PWM_Timer0_Init(unsigned char set_duty_cycle){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
	
	TCNT0 = 0; //initial timer value
  78:	e2 e5       	ldi	r30, 0x52	; 82
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	10 82       	st	Z, r1
	
	OCR0  = set_duty_cycle; 
  7e:	ec e5       	ldi	r30, 0x5C	; 92
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	80 83       	st	Z, r24
	
	DDRB  = DDRB | (1<<PB3); //set OC0 as output pin --> pin where the PWM signal is generated from MC.
  86:	a7 e3       	ldi	r26, 0x37	; 55
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	e7 e3       	ldi	r30, 0x37	; 55
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 60       	ori	r24, 0x08	; 8
  92:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
  94:	e3 e5       	ldi	r30, 0x53	; 83
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8a e6       	ldi	r24, 0x6A	; 106
  9a:	80 83       	st	Z, r24
}
  9c:	0f 90       	pop	r0
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <main>:

int main(void)
{ 
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	PWM_Timer0_Init(128); //generate duty cycle 50% to get half motor speed
  ac:	80 e8       	ldi	r24, 0x80	; 128
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_Timer0_Init>
	
	DDRA = DDRA & (~(1<<PA0)); // configure pin 0 of PORTA as input pin
  b2:	aa e3       	ldi	r26, 0x3A	; 58
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	ea e3       	ldi	r30, 0x3A	; 58
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	8c 93       	st	X, r24
	DDRA = DDRA & (~(1<<PA1)); // configure pin 1 of PORTA as input pin
  c0:	aa e3       	ldi	r26, 0x3A	; 58
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	ea e3       	ldi	r30, 0x3A	; 58
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	8c 93       	st	X, r24
	DDRA = DDRA & (~(1<<PA2)); // configure pin 2 of PORTA as input pin
  ce:	aa e3       	ldi	r26, 0x3A	; 58
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	8c 93       	st	X, r24
	DDRC = DDRC | (1<<PC0);    // configure pin 3 of PORTC as output pin
  dc:	a4 e3       	ldi	r26, 0x34	; 52
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e4 e3       	ldi	r30, 0x34	; 52
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	8c 93       	st	X, r24
	DDRC = DDRC | (1<<PC1);    // configure pin 4 of PORTC as output pin
  ea:	a4 e3       	ldi	r26, 0x34	; 52
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	e4 e3       	ldi	r30, 0x34	; 52
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	8c 93       	st	X, r24
	
	//Motor is stop at the beginning
	PORTC &= ~((1<<PC0) | (1<<PC1));
  f8:	a5 e3       	ldi	r26, 0x35	; 53
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e5 e3       	ldi	r30, 0x35	; 53
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8c 7f       	andi	r24, 0xFC	; 252
 104:	8c 93       	st	X, r24
	 
    while(1)
    {
		// check if the first switch is pressed (Rotate clock wise)
		if(PINA & (1<<PA0))
 106:	e9 e3       	ldi	r30, 0x39	; 57
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 2f       	mov	r24, r24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	81 70       	andi	r24, 0x01	; 1
 112:	90 70       	andi	r25, 0x00	; 0
 114:	88 23       	and	r24, r24
 116:	79 f0       	breq	.+30     	; 0x136 <main+0x92>
		{
			PORTC = PORTC & (~(1<<PC0));
 118:	a5 e3       	ldi	r26, 0x35	; 53
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e5 e3       	ldi	r30, 0x35	; 53
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	8c 93       	st	X, r24
			PORTC = PORTC | (1<<PC1);
 126:	a5 e3       	ldi	r26, 0x35	; 53
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e5 e3       	ldi	r30, 0x35	; 53
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	82 60       	ori	r24, 0x02	; 2
 132:	8c 93       	st	X, r24
 134:	e8 cf       	rjmp	.-48     	; 0x106 <main+0x62>
		}
		
		// check if the second switch is pressed (Rotate anti-clock wise)
		else if(PINA & (1<<PA1))
 136:	e9 e3       	ldi	r30, 0x39	; 57
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	82 70       	andi	r24, 0x02	; 2
 142:	90 70       	andi	r25, 0x00	; 0
 144:	00 97       	sbiw	r24, 0x00	; 0
 146:	79 f0       	breq	.+30     	; 0x166 <main+0xc2>
		{
			PORTC = PORTC | (1<<PC0);
 148:	a5 e3       	ldi	r26, 0x35	; 53
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e5 e3       	ldi	r30, 0x35	; 53
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	81 60       	ori	r24, 0x01	; 1
 154:	8c 93       	st	X, r24
			PORTC = PORTC & (~(1<<PC1));	
 156:	a5 e3       	ldi	r26, 0x35	; 53
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e5 e3       	ldi	r30, 0x35	; 53
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	8c 93       	st	X, r24
 164:	d0 cf       	rjmp	.-96     	; 0x106 <main+0x62>
		}
				
		// check if the third switch is pressed (turn off the motor)
		else if(PINA & (1<<PA2))
 166:	e9 e3       	ldi	r30, 0x39	; 57
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	84 70       	andi	r24, 0x04	; 4
 172:	90 70       	andi	r25, 0x00	; 0
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	39 f2       	breq	.-114    	; 0x106 <main+0x62>
		{
			PORTC = PORTC & (~(1<<PC0));
 178:	a5 e3       	ldi	r26, 0x35	; 53
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e5 e3       	ldi	r30, 0x35	; 53
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	8c 93       	st	X, r24
			PORTC = PORTC & (~(1<<PC1));
 186:	a5 e3       	ldi	r26, 0x35	; 53
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e5 e3       	ldi	r30, 0x35	; 53
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	8c 93       	st	X, r24
 194:	b8 cf       	rjmp	.-144    	; 0x106 <main+0x62>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
